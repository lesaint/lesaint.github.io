<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Javatronic - articles</title><link href="https://www.javatronic.fr/" rel="alternate"></link><link href="https://www.javatronic.fr/feeds/articles.atom.xml" rel="self"></link><id>https://www.javatronic.fr/</id><updated>2024-05-03T00:00:00+02:00</updated><entry><title>No more out-of-the-box search support for Elegant theme anymore</title><link href="https://www.javatronic.fr/posts/2024/05/03/no-more-out-of-the-box-search-support-for-elegant-theme-anymore/" rel="alternate"></link><published>2024-05-03T00:00:00+02:00</published><updated>2024-05-03T00:00:00+02:00</updated><author><name>Sébastien Lesaint</name></author><id>tag:www.javatronic.fr,2024-05-03:/posts/2024/05/03/no-more-out-of-the-box-search-support-for-elegant-theme-anymore/</id><summary type="html">&lt;h1 id="tipue_search-abandoned"&gt;tipue_search abandoned&lt;a class="headerlink" href="#tipue_search-abandoned" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Element theme documentation suggests using the following configuration to enable search, which relies on the &lt;code&gt;tipue_search&lt;/code&gt; plugin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tipue_search&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;DIRECT_TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;search&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, this plugin and the jquery code it relies on is abandoned, as stated on Pelican Plugin's page of the plugin:&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot tipue_search abandoned message" src="https://www.javatronic.fr/images/2024-05-03_enabling_search_in_elegant_theme/tipue_search_abandoned_screenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pelican_search&lt;/code&gt; plugin should be used instead …&lt;/p&gt;</summary><content type="html">&lt;h1 id="tipue_search-abandoned"&gt;tipue_search abandoned&lt;a class="headerlink" href="#tipue_search-abandoned" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Element theme documentation suggests using the following configuration to enable search, which relies on the &lt;code&gt;tipue_search&lt;/code&gt; plugin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tipue_search&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;DIRECT_TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;search&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, this plugin and the jquery code it relies on is abandoned, as stated on Pelican Plugin's page of the plugin:&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot tipue_search abandoned message" src="https://www.javatronic.fr/images/2024-05-03_enabling_search_in_elegant_theme/tipue_search_abandoned_screenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pelican_search&lt;/code&gt; plugin should be used instead, but how?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://elegant.oncrashreboot.com/add-search&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pelican-plugins/tipue-search?tab=readme-ov-file"&gt;tipue_search's plugin Github page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id="pelican_search-abandoned"&gt;pelican_search abandoned&lt;a class="headerlink" href="#pelican_search-abandoned" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;pelican_search relies on &lt;code&gt;stork&lt;/code&gt; and this tool should be installed prior to install and run the Pelican plugin: &lt;/p&gt;
&lt;p&gt;Install Stork  on Ubuntu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/bin
wget&lt;span class="w"&gt; &lt;/span&gt;-O&lt;span class="w"&gt; &lt;/span&gt;stork&lt;span class="w"&gt; &lt;/span&gt;https://files.stork-search.net/releases/v1.6.0/stork-ubuntu-20-04
chmod&lt;span class="w"&gt; &lt;/span&gt;+x&lt;span class="w"&gt; &lt;/span&gt;stork
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, running stork fails on Ubuntu 22.04:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;stork
stork:&lt;span class="w"&gt; &lt;/span&gt;error&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;loading&lt;span class="w"&gt; &lt;/span&gt;shared&lt;span class="w"&gt; &lt;/span&gt;libraries:&lt;span class="w"&gt; &lt;/span&gt;libssl.so.1.1:&lt;span class="w"&gt; &lt;/span&gt;cannot&lt;span class="w"&gt; &lt;/span&gt;open&lt;span class="w"&gt; &lt;/span&gt;shared&lt;span class="w"&gt; &lt;/span&gt;object&lt;span class="w"&gt; &lt;/span&gt;file:&lt;span class="w"&gt; &lt;/span&gt;No&lt;span class="w"&gt; &lt;/span&gt;such&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, I started searching for a solution.
Found one for 2-years old Ubuntu 20 (&lt;a href="https://stackoverflow.com/a/72633324"&gt;https://stackoverflow.com/a/72633324&lt;/a&gt;) that required manually installing a specific
version of OpenSSL and that I would not have followed even if it applied to Ubuntu 22.&lt;/p&gt;
&lt;p&gt;And then I found out the one maintainer of the project had stepped out a year ago:&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot stork_search abandoned message" src="https://www.javatronic.fr/images/2024-05-03_enabling_search_in_elegant_theme/stork_search_abandoned_screenshot.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sources: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stork-search.net/docs/install"&gt;Stork install instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jameslittle230/stork/discussions/360"&gt;Maintainer's post on window down from project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id="search-with-google"&gt;Search with Google&lt;a class="headerlink" href="#search-with-google" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I don't have enough time to investigate alternative solutions to stork and the pelican_search plugin.&lt;/p&gt;
&lt;p&gt;However, I can customize the Elegant Theme search field, that I have forked.&lt;/p&gt;
&lt;p&gt;In file &lt;code&gt;base.html&lt;/code&gt;, I can replace&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-search&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/{{ SEARCH_URL }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onsubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;return validateForm(this.elements[&amp;#39;q&amp;#39;].value);&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;search-query&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Search&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tipue_search_input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;by the following and create a Google search in a new window with &lt;code&gt;site:www.javatronic.fr&lt;/code&gt; as a filter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{% if SEARCH_URL %}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-search&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{SEARCH_URL}}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onsubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;return validateForm(this.elements[&amp;#39;q&amp;#39;][0].value);&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_blank&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;search-query&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Search&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tipue_search_input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;site:{{ SITEURL }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="articles"></category><category term="pelican"></category><category term="personal website"></category><category term="python"></category></entry><entry><title>Migrating from Jekyll to Pelican</title><link href="https://www.javatronic.fr/posts/2024/05/02/migrating-from-jekyll-to-pelican/" rel="alternate"></link><published>2024-05-02T00:00:00+02:00</published><updated>2024-05-02T00:00:00+02:00</updated><author><name>Sébastien Lesaint</name></author><id>tag:www.javatronic.fr,2024-05-02:/posts/2024/05/02/migrating-from-jekyll-to-pelican/</id><summary type="html">&lt;h1 id="boostrap"&gt;Boostrap&lt;a class="headerlink" href="#boostrap" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Setup project directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;.venv
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pelican[markdown]&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.venv/bin/activate
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Options for quickstart configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; Where do you want to create your new web site? [.] 
&amp;gt; What will be the title of this web site? Javatronic
&amp;gt; Who will be …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1 id="boostrap"&gt;Boostrap&lt;a class="headerlink" href="#boostrap" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Setup project directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;.venv
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pelican[markdown]&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.venv/bin/activate
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Options for quickstart configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; Where do you want to create your new web site? [.] 
&amp;gt; What will be the title of this web site? Javatronic
&amp;gt; Who will be the author of this web site? Sébastien Lesaint
&amp;gt; What will be the default language of this web site? [fr] en
&amp;gt; What is your URL prefix? (see above example; no trailing slash) https://www.javatronic.fr
&amp;gt; Do you want to enable article pagination? (Y/n) y
&amp;gt; How many articles per page do you want? [10] 10
&amp;gt; What is your time zone? [Europe/Rome] Europe/Paris
&amp;gt; Do you want to generate a tasks.py/Makefile to automate generation and publishing? (Y/n) y
&amp;gt; Do you want to upload your website using FTP? (y/N) n
&amp;gt; Do you want to upload your website using SSH? (y/N) n
&amp;gt; Do you want to upload your website using Dropbox? (y/N) n
&amp;gt; Do you want to upload your website using S3? (y/N) n
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) n
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) y
&amp;gt; Is this your personal page (username.github.io)? (y/N) y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;source: https://docs.getpelican.com/en/latest/quickstart.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="customize-for-markdown"&gt;Customize for markdown&lt;a class="headerlink" href="#customize-for-markdown" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Add the following to &lt;code&gt;pelicanconf.py&lt;/code&gt;, which:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Markdown support is enabled by installing &lt;code&gt;pelican[markdown]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Enable TOC extension to generate Table of Content where &lt;code&gt;[TOC]&lt;/code&gt; is present in markdown&lt;/li&gt;
&lt;li&gt;depth limited to 2&lt;/li&gt;
&lt;li&gt;Enable &lt;a href="https://python-markdown.github.io/extensions/extra/"&gt;Extra&lt;/a&gt; extension for &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Fenced Code Blocks&lt;/a&gt; and because the others can't hurt&lt;/li&gt;
&lt;li&gt;Enable &lt;a href="https://python-markdown.github.io/extensions/nl2br/"&gt;New Line To Break&lt;/a&gt; and &lt;a href="https://python-markdown.github.io/extensions/sane_lists/"&gt;Sane Lists&lt;/a&gt; because they just make sense&lt;/li&gt;
&lt;li&gt;Enable &lt;code&gt;pymdownx.superfences&lt;/code&gt; extension&lt;/li&gt;
&lt;li&gt;I need it to support code blocks within lists&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;extension_configs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;markdown.extensions.toc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Table of contents:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;toc_depth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;markdown.extensions.codehilite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;css_class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;highlight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;markdown.extensions.extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;markdown.extensions.meta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;markdown.extensions.sane_lists&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;markdown.extensions.nl2br&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;pymdownx.superfences&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;output_format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;sources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.getpelican.com/en/stable/settings.html#basic-settings"&gt;Pelican's documentation for setting &lt;code&gt;MARKDOWN&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://python-markdown.github.io/extensions/"&gt;Python Markdown built-in extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://facelessuser.github.io/pymdown-extensions/extensions/superfences/"&gt;Documentation of superfences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://facelessuser.github.io/pymdown-extensions/installation/"&gt;Installation of PyMDown Extensions&lt;/a&gt; superfences is a part of&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id="migrating-markdown-files-content"&gt;Migrating markdown files content&lt;a class="headerlink" href="#migrating-markdown-files-content" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The following content in markdown must be changed.&lt;/p&gt;
&lt;h2 id="metadata"&gt;metadata&lt;a class="headerlink" href="#metadata" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;syntax is different&lt;/li&gt;
&lt;li&gt;some items do not exist in Pelican: &lt;code&gt;layout&lt;/code&gt;, &lt;code&gt;image&lt;/code&gt;, &lt;code&gt;comments&lt;/code&gt;, &lt;code&gt;share&lt;/code&gt;, &lt;code&gt;redirect_from&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;category&lt;/code&gt; metadata can be dropped as we will use directories instead of metadata&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt; metadata can be renamed to &lt;code&gt;summary&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;content of &lt;code&gt;tags&lt;/code&gt; metadata must be converted to a comma-separated list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"&lt;/code&gt; (quotes) must be removed from &lt;code&gt;title&lt;/code&gt; metadata&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="table-of-content"&gt;Table of content&lt;a class="headerlink" href="#table-of-content" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;syntax is different: &lt;code&gt;{:toc}&lt;/code&gt; must be replaced by &lt;code&gt;[TOC]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;title &lt;code&gt;* Table of Contents&lt;/code&gt; can be removed as  it is inserted by the markdown plugin&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="code-blocks"&gt;code blocks&lt;a class="headerlink" href="#code-blocks" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;syntax is different: &lt;code&gt;{% highlight foo}&lt;/code&gt; replaced by &lt;code&gt;```foo&lt;/code&gt; and &lt;code&gt;{% endhighlight %}&lt;/code&gt; replaced by &lt;code&gt;```&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="links"&gt;links&lt;a class="headerlink" href="#links" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;syntax for internal links is different: from &lt;code&gt;[foo]({% posturl bar %})&lt;/code&gt; to &lt;code&gt;[foo]({filename}bar)&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;articles/bar&lt;/code&gt; must become &lt;code&gt;/articles/bar.md&lt;/code&gt; if current file is not in the &lt;code&gt;articles&lt;/code&gt; category (aka. root relative)&lt;/li&gt;
&lt;li&gt;otherwise, it can become &lt;code&gt;bar.md&lt;/code&gt; (aka. file relative)&lt;/li&gt;
&lt;li&gt;for simplicity, we will use root relative everywhere&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;syntax for links to resources is different and resources have a different location&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{{ site.url }}/resourcs/foo.png&lt;/code&gt; must become &lt;code&gt;{static}/images/foo.png&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(resources could also be "attached" but, so far, I haven't seen the use case, so I'll keep to &lt;code&gt;{static}&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;sources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.getpelican.com/en/latest/content.html#linking-to-internal-content"&gt;Pelican's doc on linking to internal content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.getpelican.com/en/latest/content.html#linking-to-static-files"&gt;Pelican's doc on linking resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id="manual-migration-attempt"&gt;Manual migration attempt&lt;a class="headerlink" href="#manual-migration-attempt" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;find all code block types
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grep&lt;span class="w"&gt; &lt;/span&gt;--no-filename&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{% highlight&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*.md&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;-L1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sort&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;uniq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;replace opening blocks
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sed&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;s/{% highlight sh %}/\`\`\`shell/g&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*.md&lt;span class="w"&gt; &lt;/span&gt;
sed&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;s/{% highlight java %}/\`\`\`java/g&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*.md&lt;span class="w"&gt; &lt;/span&gt;
sed&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;s/{% highlight xml %}/\`\`\`xml/g&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*.md&lt;span class="w"&gt; &lt;/span&gt;
sed&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;s/{% highlight json %}/\`\`\`json/g&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*.md&lt;span class="w"&gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;replace closing blocks
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sed&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;s/{% endhighlight %}/\`\`\`/g&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;remove heading and trailing &lt;code&gt;---&lt;/code&gt; of Jekyll header
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sed&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/^\-\-\-/d&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Altering the metadata, including converting data on multiple lines to a single line, is too hard of a challenge to do
with bash. The tool is not appropriate. Let's switch to Python.&lt;/p&gt;
&lt;h1 id="python-based-migration"&gt;Python-based migration&lt;a class="headerlink" href="#python-based-migration" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;See &lt;a href="https://github.com/lesaint/jekyll_to_pelican_migration/blob/main/migrate_md.py"&gt;migrate_md.py&lt;/a&gt; on Github.&lt;/p&gt;</content><category term="articles"></category><category term="pelican"></category><category term="personal website"></category></entry><entry><title>Setting up a Minecraft server on Google Compute Engine</title><link href="https://www.javatronic.fr/posts/2014/10/25/setting-up-a-minecraft-server-on-google-compute-engine/" rel="alternate"></link><published>2014-10-25T00:00:00+02:00</published><updated>2014-10-25T00:00:00+02:00</updated><author><name>Sébastien Lesaint</name></author><id>tag:www.javatronic.fr,2014-10-25:/posts/2014/10/25/setting-up-a-minecraft-server-on-google-compute-engine/</id><summary type="html">&lt;p&gt;This article will get you through the (few) steps to set up a Minecraft server on a Google Compute Engine instance.&lt;/p&gt;

&lt;h1 id="create-google-cloud-account"&gt;Create Google Cloud account&lt;a class="headerlink" href="#create-google-cloud-account" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Go to &lt;a href="https://console.developers.google.com/project"&gt;https://console.developers.google.com/project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is the Google Developer Console and entry point to the Google Cloud services. You need to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This article will get you through the (few) steps to set up a Minecraft server on a Google Compute Engine instance.&lt;/p&gt;

&lt;h1 id="create-google-cloud-account"&gt;Create Google Cloud account&lt;a class="headerlink" href="#create-google-cloud-account" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Go to &lt;a href="https://console.developers.google.com/project"&gt;https://console.developers.google.com/project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is the Google Developer Console and entry point to the Google Cloud services. You need to login with a Google account.&lt;/p&gt;
&lt;p&gt;If you already have Gmail and you are connected, the page will display without any authentication.&lt;/p&gt;
&lt;h2 id="create-project"&gt;create project&lt;a class="headerlink" href="#create-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the Google Developer Console, go to &lt;code&gt;projects&lt;/code&gt; and create a new one.&lt;/p&gt;
&lt;p&gt;The name of the project is for your own convenience. Google will generate a human readable project id which is the value you will need to identify a project when using the &lt;a href="#install-google-cloud-sdk"&gt;Google Cloud SDK&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="provide-billing-info"&gt;provide billing info&lt;a class="headerlink" href="#provide-billing-info" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Billing info are required to use Google Compute Engine because creating an instance or a disk will cost you from the first minute (but, so little...).&lt;/p&gt;
&lt;h1 id="google-cloud-sdk"&gt;Google Cloud SDK&lt;a class="headerlink" href="#google-cloud-sdk" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="install-it"&gt;install it&lt;a class="headerlink" href="#install-it" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My installation setup is described in &lt;a href="{filename/from_jekyll/tips/2014-10-17-installing_google_cloud_sdk_on_ubuntu_with_oh-my-zsh.md"&gt;Installing Google Cloud SDK on Ubuntu with Oh-My-Zsh&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="authenticate"&gt;authenticate&lt;a class="headerlink" href="#authenticate" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gcloud&lt;span class="w"&gt; &lt;/span&gt;auth&lt;span class="w"&gt; &lt;/span&gt;init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Go to your browser, authenticate or choose a Google account if necessary and authorize the Google Cloud SDK on your computer to access your Google Account.&lt;/p&gt;
&lt;h2 id="set-project"&gt;set project&lt;a class="headerlink" href="#set-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can either set a project globally with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gcloud&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;project&lt;span class="w"&gt; &lt;/span&gt;cagoo-jimba-2345
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or create a directory for your project so that you can then switch from one project to the other by just changing the current directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/some/dir/where/you/can/to/create/googlecloud/project/directories
gcloud&lt;span class="w"&gt; &lt;/span&gt;init&lt;span class="w"&gt; &lt;/span&gt;cagoo-jimba-2345
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="create-an-instance"&gt;create an instance&lt;a class="headerlink" href="#create-an-instance" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="create-a-disk"&gt;create a disk&lt;a class="headerlink" href="#create-a-disk" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The point here is to set up an instance with a Minecraft server but as we will see below, the instance itself can be created and destroyed at will.&lt;/p&gt;
&lt;p&gt;What matters really is the disk where Minecraft server program is set up and where the world's data is stored. As long as we keep the disk, we can create a new instance latter with the same disk and it will feel as it was still the first instance.&lt;/p&gt;
&lt;p&gt;So, we start by creating a disk:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gcloud&lt;span class="w"&gt; &lt;/span&gt;compute&lt;span class="w"&gt; &lt;/span&gt;disks&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;minecraft-server&lt;span class="w"&gt; &lt;/span&gt;--image&lt;span class="w"&gt; &lt;/span&gt;debian-7&lt;span class="w"&gt; &lt;/span&gt;--zone&lt;span class="w"&gt; &lt;/span&gt;europe-west1-a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;this will create a standard disk (non-SSD) of 10Gb from a debian 7 image&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="create-an-instance-with-an-existing-disk"&gt;create an instance with an existing disk&lt;a class="headerlink" href="#create-an-instance-with-an-existing-disk" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gcloud&lt;span class="w"&gt; &lt;/span&gt;compute&lt;span class="w"&gt; &lt;/span&gt;instances&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;minecraft-server&lt;span class="w"&gt; &lt;/span&gt;--zone&lt;span class="w"&gt; &lt;/span&gt;europe-west1-a&lt;span class="w"&gt; &lt;/span&gt;--disk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;minecraft-server&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes&lt;span class="w"&gt; &lt;/span&gt;auto-delete&lt;span class="o"&gt;=&lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;--tags&lt;span class="w"&gt; &lt;/span&gt;minecraft
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;use existing disk and keep it even when VM is deleted
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;--disk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;minecraft-server&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes&lt;span class="w"&gt; &lt;/span&gt;auto-delete&lt;span class="o"&gt;=&lt;/span&gt;no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;add tag &lt;code&gt;minecraft&lt;/code&gt; to match firewall rule (uppercase letters are not valid)
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;--tags&lt;span class="w"&gt; &lt;/span&gt;minecraft
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="allow-minecraft-traffic"&gt;allow Minecraft traffic&lt;a class="headerlink" href="#allow-minecraft-traffic" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gcloud&lt;span class="w"&gt; &lt;/span&gt;compute&lt;span class="w"&gt; &lt;/span&gt;firewall-rules&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;allow-minecraft&lt;span class="w"&gt; &lt;/span&gt;--description&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Incoming minecraft connections allowed."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--allow&lt;span class="w"&gt; &lt;/span&gt;tcp:25565&lt;span class="w"&gt; &lt;/span&gt;--target-tags&lt;span class="w"&gt; &lt;/span&gt;minecraft
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;allow tcp traffic on port &lt;code&gt;25565&lt;/code&gt;, which is the default port used by Minecraft server. You can make sure your Minecraft server is listening to this port by checking the first log lines of the server when it starts up.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;define target tag to restrict the firewall rule to only instances with the tag &lt;code&gt;minecraft&lt;/code&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;--target-tags&lt;span class="w"&gt; &lt;/span&gt;minecraft
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="connect-to-the-instance-with-ssh"&gt;connect to the instance with SSH&lt;a class="headerlink" href="#connect-to-the-instance-with-ssh" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gcloud&lt;span class="w"&gt; &lt;/span&gt;compute&lt;span class="w"&gt; &lt;/span&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;minecraft-server&lt;span class="w"&gt; &lt;/span&gt;--zone&lt;span class="w"&gt; &lt;/span&gt;europe-west1-a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If this is the first time you attempt to connect to an instance via SSH with the current Google Cloud SDK installation, you will be asked to create a private-public key paar. Just follow the instructions. Note that it is best to define a passphrase to protect your keys.&lt;/p&gt;
&lt;h1 id="install-the-instance"&gt;install the instance&lt;a class="headerlink" href="#install-the-instance" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="required-basics"&gt;required basics&lt;a class="headerlink" href="#required-basics" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You will need &lt;code&gt;vim&lt;/code&gt; to edit files and &lt;code&gt;screen&lt;/code&gt; to run the Minecraft server without being connected to the instance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;update
sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;vim&lt;span class="w"&gt; &lt;/span&gt;screen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="download-and-install-oracle-java"&gt;download and install Oracle Java&lt;a class="headerlink" href="#download-and-install-oracle-java" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# downlad and unpack Java JDK 8 8u5-b13&lt;/span&gt;
wget&lt;span class="w"&gt; &lt;/span&gt;--no-check-certificate&lt;span class="w"&gt; &lt;/span&gt;--no-cookies&lt;span class="w"&gt; &lt;/span&gt;--header&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Cookie: oraclelicense=accept-securebackup-cookie"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-qO-&lt;span class="w"&gt; &lt;/span&gt;http://download.oracle.com/otn-pub/java/jdk/8u5-b13/jdk-8u5-linux-x64.tar.gz&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tar&lt;span class="w"&gt; &lt;/span&gt;xvz
&lt;span class="c1"&gt;# create symbolic link to allow update of Java without changing the rest&lt;/span&gt;
ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;jdk1.8.0_05&lt;span class="w"&gt; &lt;/span&gt;jdk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Found out how to download the JDK from Oracle website thanks to this StackOverflow post &lt;a href="http://stackoverflow.com/questions/10268583/how-to-automate-download-and-installation-of-java-jdk-on-linux"&gt;How to automate download and installation of Java JDK on Linux?&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="note-on-open-jdk"&gt;note on open-jdk&lt;a class="headerlink" href="#note-on-open-jdk" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Alternatively you could install &lt;code&gt;open-jdk&lt;/code&gt; via &lt;code&gt;apt-get&lt;/code&gt; but I found it requires installing to much stuff on the server (and takes much more time) so I rather went with installing Oracle JDK.&lt;/p&gt;
&lt;p&gt;FYI, the command line is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;openjdk-8-jre
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="download-and-install-minecraft"&gt;download and install Minecraft&lt;a class="headerlink" href="#download-and-install-minecraft" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;minecraft
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;minecraft
wget&lt;span class="w"&gt; &lt;/span&gt;https://s3.amazonaws.com/Minecraft.Download/versions/1.8/minecraft_server.1.8.jar

&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'#!/bin/bash&lt;/span&gt;
&lt;span class="s1"&gt;cd /home/lesaint/minecraft &amp;amp;&amp;amp; /home/lesaint/jdk/bin/java -jar /home/lesaint/minecraft/minecraft_server.1.8.jar -Xmx1024M -Xms1024M nogui'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/home/lesaint/minecraft.sh
chmod&lt;span class="w"&gt; &lt;/span&gt;+x&lt;span class="w"&gt; &lt;/span&gt;/home/lesaint/minecraft.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;this script starts the Minecraft server with 1Gb heap. Make sure you choose an instance with enough memory or change the &lt;code&gt;-Xmx&lt;/code&gt; and &lt;code&gt;-Xms&lt;/code&gt; values.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Minimal configuration needed is to create a file which Minecraft will read to know whether you accepted the Minecraft EULA or not.&lt;/p&gt;
&lt;p&gt;When run for the first time, Minecraft server create the file and asks you to modify it and restart the server.&lt;/p&gt;
&lt;p&gt;To save one server run, we just create it ourselves.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eula=TRUE"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/home/lesaint/minecraft/eula.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="start-the-server"&gt;start the server&lt;a class="headerlink" href="#start-the-server" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/home/lesaint/minecraft.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You must stay connected to the instance for the Minecraft server to run, we will discuss below how to &lt;a href="#let-it-run-in-the-background"&gt;let it run in the background&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="connect-to-the-server"&gt;connect to the server&lt;a class="headerlink" href="#connect-to-the-server" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The Minecraft server is running and you can now to connect to it with a Minecraft client (ie. the game).&lt;/p&gt;
&lt;h2 id="get-the-servers-ip-address"&gt;get the server's IP address&lt;a class="headerlink" href="#get-the-servers-ip-address" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Use the following command to get the list of instances and, among other informations, you can find the external IP address of the one you just started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gcloud&lt;span class="w"&gt; &lt;/span&gt;compute&lt;span class="w"&gt; &lt;/span&gt;instances&lt;span class="w"&gt; &lt;/span&gt;list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Result will look like the following and we are interested in what is below &lt;code&gt;EXTERNAL_IP&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;my-machine&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;gcloud&lt;span class="w"&gt; &lt;/span&gt;compute&lt;span class="w"&gt; &lt;/span&gt;instances&lt;span class="w"&gt; &lt;/span&gt;list&lt;span class="w"&gt;                                           &lt;/span&gt;
NAME&lt;span class="w"&gt;             &lt;/span&gt;ZONE&lt;span class="w"&gt;           &lt;/span&gt;MACHINE_TYPE&lt;span class="w"&gt;  &lt;/span&gt;INTERNAL_IP&lt;span class="w"&gt;   &lt;/span&gt;EXTERNAL_IP&lt;span class="w"&gt;  &lt;/span&gt;STATUS
minecraft-server&lt;span class="w"&gt; &lt;/span&gt;europe-west1-a&lt;span class="w"&gt; &lt;/span&gt;n1-standard-1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.240.197.56&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;104&lt;/span&gt;.155.10.4&lt;span class="w"&gt; &lt;/span&gt;RUNNING
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="connect-to-the-server_1"&gt;connect to the server&lt;a class="headerlink" href="#connect-to-the-server_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Start Minecraft, go to &lt;code&gt;Multiplayer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Either click &lt;code&gt;Direct connect&lt;/code&gt; or &lt;code&gt;Add server&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Specifity the server name if you clicked on &lt;code&gt;Add server&lt;/code&gt; and specify the &lt;code&gt;EXTERNAL_IP&lt;/code&gt; from above as &lt;code&gt;Server address&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, connect and play :)&lt;/p&gt;
&lt;h1 id="let-it-run-in-the-background"&gt;let it run in the background&lt;a class="headerlink" href="#let-it-run-in-the-background" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The problem when starting the Minecraft server from an SSH session is that the server's process will be ended when the SSH session is ended (ie. when you disconnect).&lt;/p&gt;
&lt;h2 id="use-screen"&gt;use &lt;code&gt;screen&lt;/code&gt;&lt;a class="headerlink" href="#use-screen" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To work around this, start the Minecraft server using &lt;a href="http://www.gnu.org/software/screen/manual/screen.html"&gt;screen&lt;/a&gt;. Screen has been installed when doing the &lt;a href="#basic-configuration-of-instance"&gt;basic configuration of instance&lt;/a&gt; earlier.&lt;/p&gt;
&lt;h3 id="start-the-server_1"&gt;start the server&lt;a class="headerlink" href="#start-the-server_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Start the Minecraft server in a new &lt;code&gt;screen&lt;/code&gt; terminal window.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;screen&lt;span class="w"&gt; &lt;/span&gt;/home/lesaint/minecraft.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To exit &lt;code&gt;screen&lt;/code&gt; without killing it, use &lt;code&gt;CTRL+a d&lt;/code&gt; (type &lt;code&gt;CTRL+A&lt;/code&gt; on your keyboard and then letter &lt;code&gt;d&lt;/code&gt;). It is called "detaching" from the &lt;code&gt;screen&lt;/code&gt; session.&lt;/p&gt;
&lt;p&gt;You can check the Minecraft server java process is actually running with the following command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ps&lt;span class="w"&gt; &lt;/span&gt;-ef&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="get-your-hands-back-on-the-server"&gt;get your hands back on the server&lt;a class="headerlink" href="#get-your-hands-back-on-the-server" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To "reattach" to the &lt;code&gt;screen&lt;/code&gt; terminal, you must find its id. List all &lt;code&gt;screen&lt;/code&gt; session on the current host with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;screen&lt;span class="w"&gt; &lt;/span&gt;-list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Result will look like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;lesaint@minecraft-server:~$&lt;span class="w"&gt; &lt;/span&gt;screen&lt;span class="w"&gt; &lt;/span&gt;-list
There&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;screen&lt;span class="w"&gt; &lt;/span&gt;on:
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;2046&lt;/span&gt;.pts-1.minecraft-server&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/16/14&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:03&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;Detached&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Socket&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/var/run/screen/S-lesaint.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can reattach to the &lt;code&gt;screen&lt;/code&gt; session with the number at the beginning of the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;screen&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2046&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From that point, you can manage the Minecraft server as you would be doing if you had started it from the SSH session directly.&lt;/p&gt;
&lt;h3 id="stop-the-server"&gt;stop the server&lt;a class="headerlink" href="#stop-the-server" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To stop the server, reattach to the &lt;code&gt;screen&lt;/code&gt; session and just type &lt;code&gt;CTRL+C&lt;/code&gt;. It will stop the Minecraft server and if you started the &lt;code&gt;screen&lt;/code&gt; session with the Minecraft service as an argument,it will also end the &lt;code&gt;screen&lt;/code&gt; session. &lt;/p&gt;
&lt;h1 id="destroy-the-instance"&gt;destroy the instance&lt;a class="headerlink" href="#destroy-the-instance" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;When you don't need the instance, destroy it as it will cost you even if it is not doing anything. Since it is so easy and quick to recreate it, do not hesitate.&lt;/p&gt;
&lt;p&gt;What matters is the disk and it will not be deleted if you correctly specified &lt;code&gt;auto-delete=no&lt;/code&gt; when creating the instance (see &lt;a href="#create-an-instance-with-an-existing-disk"&gt;create instance with existing disk&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In doubt, go to the Google developer console, display the instance properties. A checkbox indicates whether the disk will be deleted when the instance is deleted. You can change the value directly from there.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gcloud&lt;span class="w"&gt; &lt;/span&gt;compute&lt;span class="w"&gt; &lt;/span&gt;instances&lt;span class="w"&gt; &lt;/span&gt;delete&lt;span class="w"&gt; &lt;/span&gt;minecraft-server&lt;span class="w"&gt; &lt;/span&gt;--zone&lt;span class="w"&gt; &lt;/span&gt;europe-west1-a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="articles"></category><category term="Cloud"></category><category term="Minecraft"></category><category term="Google Compute Engine"></category></entry><entry><title>How does annotation processing work in Java</title><link href="https://www.javatronic.fr/posts/2014/10/08/how-does-annotation-processing-work-in-java/" rel="alternate"></link><published>2014-10-08T00:00:00+02:00</published><updated>2014-10-08T00:00:00+02:00</updated><author><name>Sébastien Lesaint</name></author><id>tag:www.javatronic.fr,2014-10-08:/posts/2014/10/08/how-does-annotation-processing-work-in-java/</id><summary type="html">&lt;p&gt;This article is an introduction to Annotation Processing in &lt;code&gt;Java&lt;/code&gt; and provides an overview on Annotation Processing mechanics during compilation.&lt;/p&gt;

&lt;h1 id="what-is-annotation-processing"&gt;What is annotation processing&lt;a class="headerlink" href="#what-is-annotation-processing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Annotation Processing can be described as an opportunity to extend the compilation process with specific behavior based primarily on metadata stored in annotations but also on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This article is an introduction to Annotation Processing in &lt;code&gt;Java&lt;/code&gt; and provides an overview on Annotation Processing mechanics during compilation.&lt;/p&gt;

&lt;h1 id="what-is-annotation-processing"&gt;What is annotation processing&lt;a class="headerlink" href="#what-is-annotation-processing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Annotation Processing can be described as an opportunity to extend the compilation process with specific behavior based primarily on metadata stored in annotations but also on source code in general.&lt;/p&gt;
&lt;p&gt;Annotation Processing occurs during source code compilation.&lt;/p&gt;
&lt;p&gt;The compiler will call instances of classes implementing a specific interface available in the classpath.&lt;/p&gt;
&lt;p&gt;These objects have access to an API that allows them to read Object models of source code, to write files, to display log message as part of the compiler logs or to fail the compilation.&lt;/p&gt;
&lt;p&gt;Commonly, Annotation Processing involves one or more of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;implementing additional source code checks&lt;/li&gt;
&lt;li&gt;generating source code (classes, interfaces)&lt;/li&gt;
&lt;li&gt;generating any kind of file (such as config files, documentation, ...)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="can-not-modify-source-code"&gt;can not modify source code&lt;a class="headerlink" href="#can-not-modify-source-code" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is something that &lt;strong&gt;can not&lt;/strong&gt; be done through Annotation Processing, at least in principle. The API does not allow it.&lt;/p&gt;
&lt;p&gt;But, it is possible and one specific framework is famous for actually doing just that: &lt;a href="http://projectlombok.org"&gt;Lombok&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As described in this &lt;a href="http://stackoverflow.com/questions/6107197/how-does-lombok-work/6108573#6108573"&gt;stackoverflow response&lt;/a&gt;, &lt;code&gt;Lombok&lt;/code&gt; manages to modify source code using a hack: casting objects of the API passed to the Annotation Processor into the compiler internal objects representing the source code model and which can be modified to modify the generated bytecode.&lt;/p&gt;
&lt;h1 id="what-happens-when-compiling"&gt;What happens when compiling&lt;a class="headerlink" href="#what-happens-when-compiling" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;When run, the compiler looks for Annotation Processors (see &lt;a href="#the-discovery-process"&gt;discovery mechanism&lt;/a&gt; below), checks what annotations each of them supports and then starts processing those annotations in a sequence of rounds.&lt;/p&gt;
&lt;h2 id="annotation-processing-rounds"&gt;annotation processing rounds&lt;a class="headerlink" href="#annotation-processing-rounds" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each processing round is made of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a list of input files&lt;/li&gt;
&lt;li&gt;a list of annotations: all input files in the previous list have at least one &lt;a href="http://docs.oracle.com/javase/7/docs/api/javax/lang/model/element/Element.html"&gt;Element&lt;/a&gt; with an annotation from this list&lt;/li&gt;
&lt;li&gt;a list of annotation processor(s): which all have registered to at least one of the annotations in the list above (or any annotation using the &lt;code&gt;*&lt;/code&gt; wildcard)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The compiler will create any number of round until is reaches the final round made of no input files.&lt;/p&gt;
&lt;p&gt;My understanding is that the compiler is contractualy free to build rounds as any combination of the three lists above but with the respect of these rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an input file is processed only once, it will be part of one and only one round&lt;/li&gt;
&lt;li&gt;once a Annotation Processor has been involved in a round, it will be called during every subsequent rounds&lt;/li&gt;
&lt;li&gt;there is always a final round with no input file.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="input-files"&gt;input files&lt;a class="headerlink" href="#input-files" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Input files could be defined as source files with at least one &lt;a href="http://docs.oracle.com/javase/7/docs/api/javax/lang/model/element/Element.html"&gt;Element&lt;/a&gt; (a package, a class/interface/enum, a method, a variable, a parameter, ...) and which hasn't yet been part of a round.&lt;/p&gt;
&lt;h2 id="the-first-round"&gt;the first round&lt;a class="headerlink" href="#the-first-round" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As long as it finds at least one source file with at least one annotation and as long as it is aware of at least one Annotation Processor, the compiler will create a first round of annotation processing.&lt;/p&gt;
&lt;p&gt;Experimentaly (*), I found that all source files seems to be processed during the first round. I may not have tested with enough source files to see the 
source files spawned over more than one round.&lt;/p&gt;
&lt;h2 id="intermediary-rounds"&gt;intermediary rounds&lt;a class="headerlink" href="#intermediary-rounds" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Subsequent rounds (not counting the last one which is always there) will be created only if at least one new source file with an annotation has generated by the previous round.&lt;/p&gt;
&lt;h3 id="the-last-round"&gt;the last round&lt;a class="headerlink" href="#the-last-round" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When there is no type in source code to process and if the previous round has generated no type at all, one last round will be created, with empty lists of input files and annotations.&lt;/p&gt;
&lt;p&gt;This round could be seen as an opportunity for Annotation Processors to do some clean up or final source code generation.&lt;/p&gt;
&lt;p&gt;By the way, any code generated during the last round will never be processed by the compiler, it is not called the last round for nothing.&lt;/p&gt;
&lt;h3 id="round-logs"&gt;round logs&lt;a class="headerlink" href="#round-logs" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To find out about what is going on during the Annotation Processing, how many round there are and what they are made of, logs can be enabled in &lt;code&gt;Javac&lt;/code&gt; with command line arguments.&lt;/p&gt;
&lt;p&gt;See this previous &lt;a href="https://www.javatronic.fr/posts/2014/08/31/how-to-make-sure-javac-is-using-an-annotation-processor-and-troubleshoot-when-it-is-not/#customize-the-command-line"&gt;article&lt;/a&gt; for details.&lt;/p&gt;
&lt;h2 id="the-discovery-process"&gt;the discovery process&lt;a class="headerlink" href="#the-discovery-process" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To let the compiler know of &lt;code&gt;Processor&lt;/code&gt; implementation to use, the Annotation Processing specification defines a Discovery Process.&lt;/p&gt;
&lt;p&gt;One can create a file &lt;code&gt;META-INF/service/javax.annotation.processing.Processor&lt;/code&gt; which contains one line for each &lt;code&gt;Processor&lt;/code&gt; implementation with the qualified name of the class implementing the &lt;code&gt;Processor&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;The Compiler will automatically scan for this file in the class path when beeing run and use it to instanciate Annotation Processors.&lt;/p&gt;
&lt;p&gt;This previous &lt;a href="https://www.javatronic.fr/posts/2014/08/31/how-to-make-sure-javac-is-using-an-annotation-processor-and-troubleshoot-when-it-is-not/#customize-the-command-line"&gt;article&lt;/a&gt; describes how to make sure your Annotation Processor is beeing used by &lt;code&gt;Javac&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(*) projects used to make thoses experiments are available online and in a project dedicated to &lt;a href="https://github.com/lesaint/experimenting-annotation-processing"&gt;experimenting with Annotation Processing in Java&lt;/a&gt;. They use &lt;code&gt;Javac&lt;/code&gt; as a compiler.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="resources"&gt;Resources&lt;a class="headerlink" href="#resources" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;the Javadoc of the &lt;a href="http://docs.oracle.com/javase/7/docs/api/javax/annotation/processing/Processor.html"&gt;Processor interface&lt;/a&gt; is the reference description of the Annotation Processing&lt;/li&gt;
&lt;li&gt;The part about &lt;a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javac.html#processing"&gt;Annotation Processing&lt;/a&gt; in the &lt;code&gt;Javac&lt;/code&gt; documentation&lt;/li&gt;
&lt;li&gt;project &lt;a href="http://projectlombok.org"&gt;Lombok&lt;/a&gt; uses annotations to generate content in source code such as getters/setters, toString(), constructors, ...&lt;/li&gt;
&lt;/ul&gt;</content><category term="articles"></category><category term="Annotation Processing"></category><category term="Javac"></category><category term="Java"></category></entry><entry><title>How to debug an annotation processor</title><link href="https://www.javatronic.fr/posts/2014/09/22/how-to-debug-an-annotation-processor/" rel="alternate"></link><published>2014-09-22T00:00:00+02:00</published><updated>2014-09-22T00:00:00+02:00</updated><author><name>Sébastien Lesaint</name></author><id>tag:www.javatronic.fr,2014-09-22:/posts/2014/09/22/how-to-debug-an-annotation-processor/</id><summary type="html">&lt;p&gt;Though it may not sound obvious, it is possible to debug an Annotation Processor, put a break point and look precisely at what is going on.&lt;/p&gt;
&lt;p&gt;This article will dive into the details on how I currently debug the Annotation Processor of &lt;a href="https://github.com/lesaint/damapping"&gt;DAMapping&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Javac&lt;/code&gt; compiler internally uses a JVM …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Though it may not sound obvious, it is possible to debug an Annotation Processor, put a break point and look precisely at what is going on.&lt;/p&gt;
&lt;p&gt;This article will dive into the details on how I currently debug the Annotation Processor of &lt;a href="https://github.com/lesaint/damapping"&gt;DAMapping&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Javac&lt;/code&gt; compiler internally uses a JVM to do its work. So, the basic idea is to find a way to configure this JVM to accept a debugger connection and to be able to attach to the compiler process &lt;strong&gt;before&lt;/strong&gt; the Annotation Processor is run.&lt;/p&gt;
&lt;p&gt;Since the &lt;code&gt;DAMapping&lt;/code&gt; project is build with &lt;code&gt;Maven&lt;/code&gt;, my debug technic of choice is to use the &lt;code&gt;mvnDebug&lt;/code&gt; command.&lt;/p&gt;
&lt;h1 id="mvndebug"&gt;mvnDebug&lt;a class="headerlink" href="#mvndebug" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;mvnDebug&lt;/code&gt; is a command that lies in the same directory as the &lt;code&gt;mvn&lt;/code&gt; command. So, as long as the &lt;code&gt;bin&lt;/code&gt; directory of your &lt;code&gt;Maven&lt;/code&gt; installation is in the path, you should be able to use it seamlessly.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mvnDebug&lt;/code&gt; is the same exact command as &lt;code&gt;mvn&lt;/code&gt; except that it will stop instantly after beeing run and wait for a debugger to attach to its Java process before proceeding.&lt;/p&gt;
&lt;p&gt;As the &lt;code&gt;Javac&lt;/code&gt; command run by the &lt;code&gt;maven-compile&lt;/code&gt; plugin lies in the same process as the &lt;code&gt;mvn&lt;/code&gt; command, attaching to the &lt;code&gt;mvn&lt;/code&gt; process allows to attach to the &lt;code&gt;javac&lt;/code&gt; process.&lt;/p&gt;
&lt;h1 id="set-up-a-debug-connection-in-idea"&gt;Set up a debug connection in IDEA&lt;a class="headerlink" href="#set-up-a-debug-connection-in-idea" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Since I use IntelliJ IDEA, here is how to set yp a debug connection to attach to the &lt;code&gt;mvnDebug&lt;/code&gt; process in IDEA:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;go ro &lt;code&gt;Run&lt;/code&gt; &amp;gt; &lt;code&gt;Edit configuration...&lt;/code&gt; (or use the first item in the run/debug combo)&lt;/li&gt;
&lt;li&gt;click on the green &lt;code&gt;+&lt;/code&gt; sign and select &lt;code&gt;Remote&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;name to the new configuration, for example to "mvnDebug"&lt;/li&gt;
&lt;li&gt;change port to &lt;code&gt;8000&lt;/code&gt; and leave any other field to its suggested value&lt;ul&gt;
&lt;li&gt;host should be &lt;code&gt;localhost&lt;/code&gt;, Transport &lt;code&gt;Socket&lt;/code&gt; and Debugger mode &lt;code&gt;Attach&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="screenshot creating a new remove configuration mvnDebug" src="https://www.javatronic.fr/images/how_to_debug_an_annotation_processor/new_remote_configuration_mvnDebug.png"/&gt;&lt;/p&gt;
&lt;h1 id="debugging"&gt;Debugging&lt;a class="headerlink" href="#debugging" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Go to a terminal and run a command such as the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mvnDebug&lt;span class="w"&gt; &lt;/span&gt;clean&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;it is best to always use the &lt;code&gt;clean&lt;/code&gt; phase to make sure all files are compiled when debugging. Also, the command &lt;strong&gt;must&lt;/strong&gt; include the compile phase otherwise the Annotation Processor will never be run&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Go to IntelliJ IDEA, run the configuration you created.&lt;/p&gt;
&lt;p&gt;It will create a debugger session that will attach to the process on port &lt;code&gt;8000&lt;/code&gt; and the Maven process will resume (you can switch back to the terminal to see the logs moving).&lt;/p&gt;
&lt;h1 id="debuging-javac-directly"&gt;Debuging Javac directly&lt;a class="headerlink" href="#debuging-javac-directly" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This &lt;a href="http://www.pingtimeout.fr/2012/10/debugging-annotation-processor-in-every.html"&gt;post&lt;/a&gt; explains how to debug an Annotation Procossor when running &lt;code&gt;Javac&lt;/code&gt; directly.&lt;/p&gt;
&lt;p&gt;The basic idea is the same as above: allowing to connect with a debugger to the underlying JVM used by the &lt;code&gt;javac&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;This is achieved by the using the &lt;code&gt;-J&lt;/code&gt; option of &lt;code&gt;javac&lt;/code&gt; which role is to pass option to the underlying JVM.&lt;/p&gt;</content><category term="articles"></category><category term="Annotation Processing"></category><category term="Maven"></category><category term="Javac"></category></entry><entry><title>How to make sure javac is using an annotation processor and troubleshoot when it is not</title><link href="https://www.javatronic.fr/posts/2014/08/31/how-to-make-sure-javac-is-using-an-annotation-processor-and-troubleshoot-when-it-is-not/" rel="alternate"></link><published>2014-08-31T00:00:00+02:00</published><updated>2014-08-31T00:00:00+02:00</updated><author><name>Sébastien Lesaint</name></author><id>tag:www.javatronic.fr,2014-08-31:/posts/2014/08/31/how-to-make-sure-javac-is-using-an-annotation-processor-and-troubleshoot-when-it-is-not/</id><summary type="html">&lt;p&gt;When developing an annotation processor, one can either declare it to &lt;code&gt;javac&lt;/code&gt; using the &lt;code&gt;-processorpath&lt;/code&gt; command line option or with the service provider-configuration file &lt;code&gt;META-INF/services/javax.annotation.processing.Processor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In both cases, when our annotation processor seems not to be invoked by &lt;code&gt;javac&lt;/code&gt;, it is not easy to troubleshoot …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When developing an annotation processor, one can either declare it to &lt;code&gt;javac&lt;/code&gt; using the &lt;code&gt;-processorpath&lt;/code&gt; command line option or with the service provider-configuration file &lt;code&gt;META-INF/services/javax.annotation.processing.Processor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In both cases, when our annotation processor seems not to be invoked by &lt;code&gt;javac&lt;/code&gt;, it is not easy to troubleshoot why &lt;code&gt;javac&lt;/code&gt; is not using it, especially as we are not getting any error.&lt;/p&gt;
&lt;p&gt;We will see in this article how to enable and interpret &lt;code&gt;javac&lt;/code&gt; logs to make sure the annotation processor is run and if not, how to interpret them to get a few leads on where the problem is coming from.&lt;/p&gt;

&lt;h1 id="enable-and-interprete-javac-logs"&gt;enable and interprete &lt;code&gt;javac&lt;/code&gt; logs&lt;a class="headerlink" href="#enable-and-interprete-javac-logs" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Since I am using &lt;code&gt;Maven&lt;/code&gt; to build my project, I am not writing &lt;code&gt;javac&lt;/code&gt; command lines by hand, &lt;code&gt;Maven&lt;/code&gt; does it for me.&lt;/p&gt;
&lt;p&gt;Obviouly, one could configure the &lt;code&gt;maven-compile&lt;/code&gt; plugin in the pom.xml file to enable the logs we need in &lt;code&gt;javac&lt;/code&gt; but &lt;code&gt;Maven&lt;/code&gt; has a tendancy in swallowing &lt;code&gt;javac&lt;/code&gt; logs. In addition, running &lt;code&gt;Maven&lt;/code&gt; will flood the terminal with logs we don't care about. So we would rather use the &lt;code&gt;javac&lt;/code&gt; command directly. &lt;/p&gt;
&lt;h2 id="retrieve-the-javac-command-line-from-maven"&gt;retrieve the &lt;code&gt;javac&lt;/code&gt; command line from &lt;code&gt;Maven&lt;/code&gt;&lt;a class="headerlink" href="#retrieve-the-javac-command-line-from-maven" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Run &lt;code&gt;Maven&lt;/code&gt; with -X option on the module which uses the annotation processor and copy the log line after log &lt;code&gt;[DEBUG] Command line options:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, run &lt;code&gt;Maven&lt;/code&gt; with the following command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mvn&lt;span class="w"&gt; &lt;/span&gt;clean&lt;span class="w"&gt; &lt;/span&gt;compile&lt;span class="w"&gt; &lt;/span&gt;-X&lt;span class="w"&gt; &lt;/span&gt;-pl&lt;span class="w"&gt; &lt;/span&gt;:moduleName
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;-pl :moduleName&lt;/code&gt; is a way of specifying a specific module for &lt;code&gt;Maven&lt;/code&gt; to build. It allows to run the &lt;code&gt;mvn&lt;/code&gt; command from the root directory of the project. Obviously, in a single module project, this is useless. In a multi-module project however, its convenient. It saves you from changing the current directory to the module's directory and run the same &lt;code&gt;mvn&lt;/code&gt; command without that option.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="customize-the-command-line"&gt;customize the command line&lt;a class="headerlink" href="#customize-the-command-line" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;prefix what you just copied with the &lt;code&gt;javac&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;remove &lt;code&gt;-nowarn&lt;/code&gt; option, we need to see any information available, this option removes warnings&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add options &lt;code&gt;-verbose -XprintRounds -XprintProcessorInfo -Xlint -J-verbose&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-verbose&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;(doc description) Verbose output. This includes information about each class loaded and each source file compiled.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-Xlint&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;(doc description) Enable all recommended warnings. In this release, enabling all available warnings is recommended.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-XprintProcessorInfo&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;(doc description) Print information about which annotations a processor is asked to process.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-XprintRounds&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;(doc description) Print information about initial and subsequent annotation processing rounds&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;-J-verbose&lt;ul&gt;
&lt;li&gt;(doc description) Sets the -verbose option of JVM run internally by javac&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;warning about &lt;code&gt;-Xprint&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;DO NOT USE this option when you want to investigage annotation processors&lt;/li&gt;
&lt;li&gt;this option will use a Java runtime internal annotation processor to display source of compiled files and &lt;code&gt;javac&lt;/code&gt; won't log the actual annotation processor(s) that will be run during the round. It seems that this internal annotation processor wraps the actually used annotation processor(s) and we don't see which in logs&lt;/li&gt;
&lt;li&gt;(doc description) Print out textual representation of specified types for debugging purposes; perform neither annotation processing nor compilation. The format of the output may change.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(see http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javac.html for details)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(optional) send all outputs to a file, add &lt;code&gt;&amp;gt; /tmp/compile_clean.log 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="make-sure-the-annotation-processor-is-run-by-javac"&gt;make sure the annotation processor is run by &lt;code&gt;javac&lt;/code&gt;&lt;a class="headerlink" href="#make-sure-the-annotation-processor-is-run-by-javac" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To make sure there is no problem loading your Annotation Processor class, look for the next 4 log lines.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;look for a log line stating that the .class file of your AnnotationProcessor class is being read.     &lt;ul&gt;
&lt;li&gt;if the class is in a Jar:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;loading&lt;span class="w"&gt; &lt;/span&gt;ZipFileIndexFileObject&lt;span class="o"&gt;[&lt;/span&gt;/opt/maven/repository/fr/javatronic/damapping/annotation-processor/0.2.3-bundle-clean-SNAPSHOT/annotation-processor-0.2.3-bundle-clean-SNAPSHOT.jar&lt;span class="o"&gt;(&lt;/span&gt;fr/javatronic/damapping/processor/DAAnnotationProcessor.class&lt;span class="o"&gt;)]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    * if the class is on the file system&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;loading&lt;span class="w"&gt; &lt;/span&gt;RegularFileObject&lt;span class="o"&gt;[&lt;/span&gt;/home/user/DEV/damapping/damapping-samples/spring-project/target/classes/fr/javatronic/damapping/processor/DAAnnotationProcessor.class&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="2"&gt;
&lt;li&gt;look for at least one annotation processor round log&lt;ul&gt;
&lt;li&gt;look for the &lt;code&gt;Round&lt;/code&gt; string&lt;/li&gt;
&lt;li&gt;a round log line looks like the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;        &lt;/span&gt;Round&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;:
&lt;span class="w"&gt;                &lt;/span&gt;input&lt;span class="w"&gt; &lt;/span&gt;files:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;fr.javatronic.damapping.demo.domain.repository.impl.CourseSlotRepositoryImpl,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.domain.repository.impl.CourseRepositoryImpl,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.domain.repository.CourseSlotRepository,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.domain.model.Teacher,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.view.service.impl.PeopleIndexServiceImpl,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.view.model.Day,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.view.model.TimedClass,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.view.mapper.IntegerToString,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.view.model.WeekPlanning,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.view.model.EveningClasses,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.MainClass,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.view.service.impl.WeekPlanningServiceImpl,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.spring.ApplicationConfig,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.view.mapper.TeacherToPeople,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.domain.repository.impl.TeacherRositoryImpl,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.domain.model.Course,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.view.model.AfternoonClasses,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.view.model.Classes,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.view.service.WeekPlanningService,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.view.mapper.StudentToPeople,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.view.model.PeopleIndex,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.domain.model.CourseSlot,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.domain.repository.impl.StudentRepositoryImpl,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.domain.repository.StudentRepository,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.view.service.PeopleIndexService,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.view.model.MorningClasses,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.view.model.People,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.domain.repository.CourseRepository,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.domain.model.Student,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.demo.domain.repository.TeacherRository&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;annotations:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;java.lang.Override,&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.annotation.Mapper,&lt;span class="w"&gt; &lt;/span&gt;javax.annotation.Nullable,&lt;span class="w"&gt; &lt;/span&gt;org.springframework.context.annotation.Configuration&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;last&lt;span class="w"&gt; &lt;/span&gt;round:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    * make sure your annotation(s) are present in the list in the line before the last line
3. look for the log line indicating that your AnnotationProcessor has been identified to process one or more annotation&lt;/p&gt;
&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;Processor&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;qualified&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;AnnotationProcessor&lt;span class="w"&gt; &lt;/span&gt;class&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;matches&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;name&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;annotation&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;AnnotationProcessor&lt;span class="w"&gt; &lt;/span&gt;will&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;invoked&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;returns&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;true/false&lt;span class="o"&gt;]&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
4. look for a log line stating that your AnnotationProcessor class has been loaded, such as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Loaded&lt;span class="w"&gt; &lt;/span&gt;fr.javatronic.damapping.processor.DAAnnotationProcessor&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;file:/opt/maven/repository/fr/javatronic/damapping/annotation-processor/0.2.3-bundle-clean-SNAPSHOT/annotation-processor-0.2.3-bundle-clean-SNAPSHOT.jar&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you cannot find the first log line, your AnnotationProcessor is not in the classpath of the &lt;code&gt;javac&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;If you cannot find the second log line, &lt;code&gt;javac&lt;/code&gt; did not pick any annotation processor in the classpath at all (so, not yours nor any other) or annotation processing is disabled. Make sure you don't have the &lt;code&gt;-proc:none&lt;/code&gt; on your command line.&lt;/p&gt;
&lt;p&gt;If you cannot find your annotation(s) in the second log line, you are just not compiling any class with your annotation(s). Your Annotation Processor will never be run by &lt;code&gt;javac&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you cannot find the third log line, your AnnotationProcessor might be incorrectly configured. Make sure the &lt;code&gt;getSupportedOptions()&lt;/code&gt; method of your Annotation Processor returns correctly the canonical name of the annotation(s) you want to process.&lt;/p&gt;
&lt;p&gt;If you cannot find the fourth log line, your Annotation Processor class or any class it depends on can not be loaded by &lt;code&gt;javac&lt;/code&gt;. There may be various reasons for that but I don't know how to get more details about that from &lt;code&gt;javac&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Obviously, if you can see all 4 log lines and don't get any error at all, your annotation processor is correctly beeing run by &lt;code&gt;javac&lt;/code&gt; and your problem is most likely the code of your Annotation Processor.&lt;/p&gt;
&lt;p&gt;You then need to debug your Annotation Processor and this is not trivial. I will likely post an article on how to debug an Annotation Processor soon.&lt;/p&gt;
&lt;p&gt;Hope this helps.&lt;/p&gt;</content><category term="articles"></category><category term="Annotation Processing"></category><category term="Javac"></category></entry><entry><title>Java Bean Mapping is wrong, let's fix it!</title><link href="https://www.javatronic.fr/posts/2014/05/21/java-bean-mapping-is-wrong-lets-fix-it/" rel="alternate"></link><published>2014-05-21T00:00:00+02:00</published><updated>2014-05-21T00:00:00+02:00</updated><author><name>Sébastien Lesaint</name></author><id>tag:www.javatronic.fr,2014-05-21:/posts/2014/05/21/java-bean-mapping-is-wrong-lets-fix-it/</id><summary type="html">&lt;p&gt;When it comes to Bean Mapping, it is surprising to see how many tools/frameworks are available. Some as old and famous as &lt;a href="http://dozer.sourceforge.net/"&gt;Dozer&lt;/a&gt;, other more recent and innovative as &lt;a href="https://github.com/xebia-france/selma"&gt;Selma&lt;/a&gt; (see this &lt;a href="http://www.javacodegeeks.com/2013/10/java-object-to-object-mapper.html"&gt;highly referenced post&lt;/a&gt; if you need a list).&lt;/p&gt;
&lt;p&gt;But no matter how different the technical underlying paradigms …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When it comes to Bean Mapping, it is surprising to see how many tools/frameworks are available. Some as old and famous as &lt;a href="http://dozer.sourceforge.net/"&gt;Dozer&lt;/a&gt;, other more recent and innovative as &lt;a href="https://github.com/xebia-france/selma"&gt;Selma&lt;/a&gt; (see this &lt;a href="http://www.javacodegeeks.com/2013/10/java-object-to-object-mapper.html"&gt;highly referenced post&lt;/a&gt; if you need a list).&lt;/p&gt;
&lt;p&gt;But no matter how different the technical underlying paradigms of these tools are, they have one thing in common: they take Bean Mapping code out of the application, either as XML or annotation configuration + reflection, or as generated bytecode or, more recently, as generated classes.&lt;/p&gt;
&lt;p&gt;In my opinion and experience, this is a wrong approach to Bean Mapping and the cause of many problems in the life of an application.&lt;/p&gt;
&lt;p&gt;Bean mapping can look like simple/boring/obvious/tedious-to-write code but it still holds a lot of business logic and as such must be plain part of the application code. We shouldn't take that code away or hide it.&lt;/p&gt;

&lt;h1 id="a-little-bit-on-my-experience-on-the-subject"&gt;A little bit on my experience on the subject&lt;a class="headerlink" href="#a-little-bit-on-my-experience-on-the-subject" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I have worked for 3 years on a big online application for a major French telco as a senior developer and then as a technical lead.&lt;/p&gt;
&lt;p&gt;This application integrates with nearly 100 web services (or other remote services), with a bunch of business components, a database, throws DTOs to the client user interface exposed as 150+ methods, ..., and internally, the application is made of several software layers. Overall, Bean Mapping occurs in many places and is a strong aspect of the application.&lt;/p&gt;
&lt;p&gt;Developers on this application tested several Bean Mapping solutions, from Dozer to fully hand coded mapping as the developer feels to write it, to extensive use of Guava's &lt;a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Function.html"&gt;Function&lt;/a&gt;, to other exotic approaches. I saw them behave as time goes and as the application lives, and I learned a lot.&lt;/p&gt;
&lt;p&gt;After three years, I must say that I didn't see any solution that ruled them all. I still have nightmare of the time I lost with some of them.&lt;/p&gt;
&lt;p&gt;So, I started thinking about what Bean Mapping is really about, the problems I had and concluded that Bean Mapping should be very different.&lt;/p&gt;
&lt;h1 id="existing-tools-were-created-to-write-mapping-code"&gt;Existing tools were created to write mapping code&lt;a class="headerlink" href="#existing-tools-were-created-to-write-mapping-code" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Bean mapping frameworks quick descriptions are all pretty much the same:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;include our jar/declare maven dependency/some other kind of quick setup step&lt;/li&gt;
&lt;li&gt;add this config file/this annotation/whatever to your application (optional)&lt;/li&gt;
&lt;li&gt;with these 2/3/4 lines of code, Tadah ! class A is transformed into class B&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok, good. This is simple enough and it solves the initial problem of the developer : writing the mapping code from one bean to another.&lt;/p&gt;
&lt;p&gt;Bonus, it seems to also work for tree of beans and offers customization possibilities.&lt;/p&gt;
&lt;p&gt;Then, why should I be unhappy with this solution ?&lt;/p&gt;
&lt;p&gt;Because writing the Bean Mapping code is far from the only concern of the developer, even more of the software architect : maintainability, stability, readability, support for debugging, learning curve for new developers, etc...&lt;/p&gt;
&lt;h1 id="the-practical-problems-of-hidden-mapping-code"&gt;The practical problems of hidden mapping code&lt;a class="headerlink" href="#the-practical-problems-of-hidden-mapping-code" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;As I said earlier, these frameworks remove the mapping code from the application and this introduces many practical problems as the application lives, grows (hopefully) and as developers come and go.&lt;/p&gt;
&lt;h3 id="bean-mapping-code-is-not-source-code-in-your-application"&gt;Bean Mapping code is not source code in your application&lt;a class="headerlink" href="#bean-mapping-code-is-not-source-code-in-your-application" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Therefore it is not in SCM, you can not tell when nor where a change occurred and who did it. You can't tell either when some mapping code was added or if it actually was added.&lt;/p&gt;
&lt;h3 id="bean-mapping-code-is-not-stable"&gt;Bean Mapping code is not stable&lt;a class="headerlink" href="#bean-mapping-code-is-not-stable" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The generated code/bytecode can change when upgrading the mapping framework and reflection-based mapping is even worse on that point.&lt;/p&gt;
&lt;p&gt;Sure, you are supposed to have unit tests to ensure stability but, supposing unit tests break, you will waste time to fix pieces of code which had no reason to change in the first place since they were working.&lt;/p&gt;
&lt;h3 id="you-cant-leverage-the-power-of-the-ide"&gt;you can't leverage the power of the IDE&lt;a class="headerlink" href="#you-cant-leverage-the-power-of-the-ide" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To find out where and how class &lt;code&gt;X&lt;/code&gt; is instanced or property &lt;code&gt;foo&lt;/code&gt; is set/read, you are on your own.&lt;/p&gt;
&lt;p&gt;But when it is time to find out where a problem is coming from, believe me, you will curse the guy who decided to use a Bean Mapping tool instead of just writing dumb &lt;code&gt;b.setFoo(a.getFoo())&lt;/code&gt; lines.&lt;/p&gt;
&lt;h3 id="debugging-is-usually-not-easy"&gt;debugging is usually not easy&lt;a class="headerlink" href="#debugging-is-usually-not-easy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hidden mapping code is acting as a black box: when mapping a single bean to another, it is ok, when mapping tree of beans however, it is &lt;em&gt;not&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Also, forget about putting a breakpoint in generated byte code or reflection-based frameworks code...&lt;/p&gt;
&lt;h3 id="no-direct-access-to-the-mapping-code-for-new-developers"&gt;no direct access to the mapping code for new developers&lt;a class="headerlink" href="#no-direct-access-to-the-mapping-code-for-new-developers" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When a new developer joins the project, supposing she has to fix a bug or develop an evolution, she will need to learn some tool to know about know about some dumb 1-to-1 mapping, where it happens and how.&lt;/p&gt;
&lt;h3 id="need-to-customize-say-goodbye-to-compiler-feedback"&gt;need to customize ? say goodbye to compiler feedback&lt;a class="headerlink" href="#need-to-customize-say-goodbye-to-compiler-feedback" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When the time comes to customize the mapping, you generally lose compile-time feedback and type safety because you end up using strings to designate properties and/or you are required to add some XML configuration.&lt;/p&gt;
&lt;p&gt;You can then forget about refactoring your bean classes and having the mapping code updated consistently by your IDE. Also forget about the compiler telling you that, for example, by changing the type of this property, your Bean Mapping code now fails to execute.&lt;/p&gt;
&lt;p&gt;Some tool such as &lt;a href="http://modelmapper.org/"&gt;ModelMapper&lt;/a&gt; provide a solution to this problem, but at the cost of very complex and verbose technical solutions. It is way simpler to just write the Bean Mapping code from the beginning. In addition, everyone will understand it just by looking at it.&lt;/p&gt;
&lt;h3 id="immutability-is-not-a-prime-citizen"&gt;immutability is not a prime citizen&lt;a class="headerlink" href="#immutability-is-not-a-prime-citizen" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Designing immutable beans wherever possible can be tough but it solves many issues in the long run.&lt;/p&gt;
&lt;p&gt;Unfortunately, immutable beans are not well supported by Bean Mapping frameworks, notably because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it involves bean not having setters (basic requirement of property based framework)&lt;ul&gt;
&lt;li&gt;immutable beans only have constructors to initialize their state or, better, builders&lt;/li&gt;
&lt;li&gt;both constructors and builders can hardly be automatically mapped&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;also mapping tree of immutable beans requires to map beans in a bottom-up fashion instead of the usual top-bottom way&lt;ul&gt;
&lt;li&gt;children of immutable beans must be created before their parent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="you-cant-investigate-how-mapping-actually-occurs"&gt;you can't investigate how mapping actually occurs&lt;a class="headerlink" href="#you-cant-investigate-how-mapping-actually-occurs" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This applies especially to reflection-based or bytecode generation-based mapping. Good luck when you want to make sure the problem is not at the mapping level.&lt;/p&gt;
&lt;h3 id="you-cant-tell-dead-code-apart"&gt;you can't tell dead code apart&lt;a class="headerlink" href="#you-cant-tell-dead-code-apart" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With most tools, it can be hard to tell that mapping configuration and/or customization is actually dead code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is that line of configuration still required for mapping to occur ?&lt;/li&gt;
&lt;li&gt;is that custom whatever object still used ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unless you have extensive test coverage and remove the suspicious part, sometimes, you just can not tell.&lt;/p&gt;
&lt;h3 id="not-much-or-none-control-over-mapping-of-bean-trees"&gt;not much (or none) control over mapping of bean trees&lt;a class="headerlink" href="#not-much-or-none-control-over-mapping-of-bean-trees" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When it comes to mapping trees of beans, you either do not have control over it or need to customize the framework and you end up with code that is not that simple any more:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;want to write one mapper for each node of a tree of beans, so you can really &lt;em&gt;unit&lt;/em&gt; test ? good luck&lt;/li&gt;
&lt;li&gt;want to keep type dependency between mappers so you can easily tell how your code behaves ? for some frameworks, that's just impossible&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="performance"&gt;performance ...&lt;a class="headerlink" href="#performance" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Performance is a big issue with reflection based mapping tools, they are very slow and CPU/memory intensive compared to plain Java code. In addition, this kind of code can never benefit from compiler and/or JVM optimizations.&lt;/p&gt;
&lt;p&gt;Frameworks based on other technical paradigms always compare each other on that subject but no matter what I don't think they can beat plain Java code (unless you just write shitty Java code but that's not a Bean Mapping issue).&lt;/p&gt;
&lt;h2 id="the-down-side-of-bean-mapping-code-in-source"&gt;The down side of Bean Mapping code in source&lt;a class="headerlink" href="#the-down-side-of-bean-mapping-code-in-source" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Naturally, each point made above is addressed as the developer has direct access to the code. Most of them can be dealt with as any regular Java coding problem, any solution can be used.&lt;/p&gt;
&lt;p&gt;But I am also aware of the main reasons to hide Bean Mapping code in the first place:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bean Mapping code does not add much value, no need to have it in the application&lt;ul&gt;
&lt;li&gt;as I explain below, I think this statement is wrong&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bean Mapping code written in source does not adapt easily to change&lt;ul&gt;
&lt;li&gt;I think that using the IDE refactoring capabilities is a better way to adapt to change than having code generated with each build or at runtime&lt;/li&gt;
&lt;li&gt;if it isn't, it only means that we need new tools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="bean-mapping-code-is-business-code"&gt;Bean mapping code is business code&lt;a class="headerlink" href="#bean-mapping-code-is-business-code" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;After thorough thinking, I found that the most important problem with Bean Mapping code being out of the application is that it removes business code from the application.&lt;/p&gt;
&lt;p&gt;Yes, Bean Mapping code &lt;em&gt;is&lt;/em&gt; business code.&lt;/p&gt;
&lt;p&gt;Even exact 1-to-1 mapping is business logic. This code could have been different. Some properties could have been nullified or hardcoded to a specific value on purpose. The fact it is not the case should be written in code. It &lt;strong&gt;will&lt;/strong&gt; save any question in the future.&lt;/p&gt;
&lt;p&gt;Also, the very facts that so many bugs occur at the Bean Mapping level and that such big parts of documentation are about mapping are the proof that Bean Mapping is business logic.&lt;/p&gt;
&lt;p&gt;Bean mapping code is not some technical problem that a framework can hide/remove from the application.&lt;/p&gt;
&lt;p&gt;But I agree, writing Bean Mapping &lt;em&gt;is&lt;/em&gt; a technical problem.&lt;/p&gt;
&lt;h1 id="bean-mapping-is-dead-long-live-bean-mapping"&gt;Bean Mapping is dead, long live Bean Mapping&lt;a class="headerlink" href="#bean-mapping-is-dead-long-live-bean-mapping" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Starting from the hypothesis that Bean Mapping code should be part of the application code as any other piece of business code, two questions arise:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Shouldn't that code be organized a bit ? If everyone starts writing Bean Mapping code without any guideline of some kind, code will just end up being a mess and it will be worse than before&lt;/li&gt;
&lt;li&gt;Some mapping code is just tedious to write, it feels like a waste of time, shouldn't there be some tool to help the developer ?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And one strong constraint: the developer must always keep control over the code and the tool must stay out of the way&lt;/p&gt;
&lt;p&gt;The answer to both questions is "obviously, yes!" and the constraint drove my research for a solution.&lt;/p&gt;
&lt;p&gt;I think that what we need is not one tool, but two, very much complementary:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a framework to structure Bean Mapping code and handle the wiring with the rest of the application and with other pieces of Bean Mapping code&lt;ul&gt;
&lt;li&gt;lets call it a Bean Mapping Wiring Framework&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;a tool/plugin at the IDE level to generates mapping code from one class to another&lt;ul&gt;
&lt;li&gt;lets call it a Bean Mapping Code Generator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Those two tools would solve very different problems and could be used together or not. In addition, they would never be mandatory once you start using them, they would step out of the way anytime. This way the developer keep controls over the code.&lt;/p&gt;
&lt;p&gt;Still, the ultimate goal is that these tools would be so convenient that they will end up in the coding guidelines of the team.&lt;/p&gt;
&lt;h2 id="bean-mapping-wiring-framework"&gt;Bean Mapping Wiring Framework&lt;a class="headerlink" href="#bean-mapping-wiring-framework" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Bean Mapping Wiring Framework is about letting the developer write the Bean Mapping code in a class and giving her the power to use that class's code as easily as possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;using interfaces for loose coupling&lt;ul&gt;
&lt;li&gt;developer writes the implementation, the interface which will be used in other classes to call this implementation will be generated by the framework&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;complying with Separation Of Concern&lt;ul&gt;
&lt;li&gt;using a class for each mapping from one class to another&lt;/li&gt;
&lt;li&gt;side effect, unit testing is much easier&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;integrating with Dependency Injection frameworks&lt;ul&gt;
&lt;li&gt;for example, Spring integration would be about generating annotations on classes or XML configuration files or configuration classes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;providing coding patterns to help mapping complex structures of beans or solve common Bean Mapping problems&lt;ul&gt;
&lt;li&gt;using Guava's Function to easily convert collections of beans or integrating with Java 8 lambdas&lt;/li&gt;
&lt;li&gt;using mapper factories when creating a bean from more than one source bean&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To my knowledge, there is no such framework at the moment except &lt;a href="https://github.com/lesaint/damapping"&gt;DAMapping&lt;/a&gt; which development started several month ago.&lt;/p&gt;
&lt;h2 id="bean-mapping-code-generator"&gt;Bean Mapping Code Generator&lt;a class="headerlink" href="#bean-mapping-code-generator" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The primary goal of this tool is to provide convenient generation of Bean Mapping code &lt;em&gt;inside&lt;/em&gt; the application's source code from one class to another. The IDE is the best place for this as we could rely on interactive UI to generate the source code living option to the developers.&lt;/p&gt;
&lt;p&gt;Second goal of this tool is the integration with the Bean Mapping Wiring Framework. This integration would give the option to the developer to not only generate Bean Mapping code but also generate Bean Mapping classes. This would be a convenient way of creating the code for tree of beans without being intrusive about it.&lt;/p&gt;
&lt;p&gt;Since the logic of generating mapping code already exists, developing this tool would really be a matter of IDE integration and UI design.&lt;/p&gt;
&lt;p&gt;Generating the initial Bean Mapping code is relatively easy but this tool will obviously need to complete partial mapping code to be successful. And that's a little harder to do.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;People keep on creating new Bean Mapping tools, changing the technical approach. But they tend to keep the same underlying paradigm which in my opinion is the root cause of their unhappiness with the solution they had before: hidden Bean Mapping code.&lt;/p&gt;
&lt;p&gt;This article is the first of a series on this new approach to Bean Mapping. Other articles will follow which will dive deeper into the theory and implementation of those new tools. Next article will be on the Bean Mapping Wiring Framework implementation since I already have initial working results with &lt;a href="https://github.com/lesaint/damapping"&gt;DAMapping&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I know many people (very) unhappy with Dozer and such frameworks. I'm interesting in their opinion, maybe their contribution, or existing works I am not aware of.&lt;/p&gt;
&lt;p&gt;Do not hesitate to comment below or contact me on &lt;a href="https://twitter.com/LesaintSeb"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;</content><category term="articles"></category><category term="Java"></category><category term="Bean Mapping"></category><category term="DAMapping"></category></entry><entry><title>Devoxx France 2014, second and last day feedback</title><link href="https://www.javatronic.fr/posts/2014/04/18/devoxx-france-2014-second-and-last-day-feedback/" rel="alternate"></link><published>2014-04-18T00:00:00+02:00</published><updated>2014-04-18T00:00:00+02:00</updated><author><name>Sébastien Lesaint</name></author><id>tag:www.javatronic.fr,2014-04-18:/posts/2014/04/18/devoxx-france-2014-second-and-last-day-feedback/</id><summary type="html">&lt;p&gt;This was my second and last day at Devoxx France 2014.&lt;/p&gt;
&lt;p&gt;But it was the "real" first day of Devoxx which started by a word of the Devoxx team, funny but also instructive as they dropped the news of Devoxx 2015
leaving the Mariott for a much bigger place : le …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This was my second and last day at Devoxx France 2014.&lt;/p&gt;
&lt;p&gt;But it was the "real" first day of Devoxx which started by a word of the Devoxx team, funny but also instructive as they dropped the news of Devoxx 2015
leaving the Mariott for a much bigger place : le Palais des congrés de la Porte Maillot.&lt;/p&gt;
&lt;p&gt;I also enjoyed the keynotes, especially the surprise word of Tariq Krim which gives hope of France recognising the asset which are the french developers.&lt;/p&gt;
&lt;h2 id="gradle-ne-fait-pas-que-remplacer-maven-by-cedric-champeau-cedricchampeau"&gt;Gradle ne fait pas que remplacer Maven by Cedric Champeau (@CedricChampeau)&lt;a class="headerlink" href="#gradle-ne-fait-pas-que-remplacer-maven-by-cedric-champeau-cedricchampeau" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Cedric's presentation on Gradle was quite polluted with too much trolling and comparison with Maven.
Fortunately, it went better after half the presentation when he started actually showing what Gradle is capable of and how it does it.&lt;/p&gt;
&lt;p&gt;Cedric admitted he had to skip some parts of his presentation of some features. In my opinion, the reason comes from too much time lost on giving reason of his bad opinion of Maven.&lt;/p&gt;
&lt;p&gt;Still, overall, I think I got a good idea of the product and want to try it out.&lt;/p&gt;
&lt;h2 id="les-concepts-de-la-programmation-fonctionnelle-illustres-avec-java-8-by-yannick-chartois-ychartois"&gt;Les concepts de la programmation fonctionnelle illustrés avec Java 8 by Yannick Chartois (@ychartois)&lt;a class="headerlink" href="#les-concepts-de-la-programmation-fonctionnelle-illustres-avec-java-8-by-yannick-chartois-ychartois" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I did not learn much from this quickly since I already know functional programming paradigms and now have a pretty good knowledge of Java 8 from José Paumard presentation the day before and other source of information about lambda before Devoxx.&lt;/p&gt;
&lt;p&gt;Still, the presentation was well prepared and it wasn't a strong waste of time to do a global overview of functional programming in Java 8.&lt;/p&gt;
&lt;h2 id="les-applications-reactives-un-nouveau-paradigme-pour-relever-les-defis-de-leconomie-numerique-by-fabrice-croiseaux-et-antoine-detante"&gt;Les applications réactives : un nouveau paradigme pour relever les défis de l'économie numérique by Fabrice Croiseaux et Antoine Detante&lt;a class="headerlink" href="#les-applications-reactives-un-nouveau-paradigme-pour-relever-les-defis-de-leconomie-numerique-by-fabrice-croiseaux-et-antoine-detante" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Interesting presentation about both the concepts behind the buzzword "Reactive Programming" and the patterns to implement them.&lt;/p&gt;
&lt;p&gt;The presentation included code samples in several languages, from Scala to Javascript, which very practically pointed that reactive is about patterns which can be implemented today.&lt;/p&gt;
&lt;p&gt;This was a very good introduction to the Reactive concepts and their business advantages.&lt;/p&gt;
&lt;p&gt;Lire le Reactive Manifesto&lt;/p&gt;
&lt;h2 id="cassandra-une-nouvelle-ere-by-jonathan-ellis"&gt;Cassandra, une nouvelle ère by Jonathan Ellis&lt;a class="headerlink" href="#cassandra-une-nouvelle-ere-by-jonathan-ellis" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I didn't know cassandra. I don't know how to use it any more than before this presentation, but now I'm really convinced of the powers and strength of this product.&lt;/p&gt;
&lt;p&gt;Jonathan did an excellent presentation, clear and with a pretty good french (even though he is american).
He quoted three major companies about the reasons they choose cassandra, each for different and complementary reasons.&lt;/p&gt;
&lt;p&gt;Jonathan completed this with graphics and explanations about the technical paradigms and algorithm used to achieved near perfect availability, extremely low latency and other killing features.&lt;/p&gt;
&lt;p&gt;I will keep Cassandra in mind.
After the presentation about Redis the day before, I am now aware of two database products I didn't know before and when to use each one.
I am very happy with that.&lt;/p&gt;
&lt;h2 id="vive-les-websockets-libres-by-jean-francois-arcand-jfarcand"&gt;Vive les WebSockets libres! by Jean-François Arcand (@jfarcand)&lt;a class="headerlink" href="#vive-les-websockets-libres-by-jean-francois-arcand-jfarcand" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jean-François comes from Quebec. As one would expect from a quebecois to make a presentation entertaining for a french audience from France,
he has a strong accent and jumps on any opportunity to make fun on our use of english words (such as "browser" when in Quebec, they say "fureteurs").&lt;/p&gt;
&lt;p&gt;He is also (and mainly) the creator (?) of the Atmosphere framework.&lt;/p&gt;
&lt;p&gt;That said, he is in a very good position to make an interesting, well documented and critical presentation on WebSocket (and sell Atmosphere, in the process).&lt;/p&gt;
&lt;p&gt;Now I know many of the many pitfalls of implementing websocket when the JSR isn't even finished, when browser and proxies are very inconsistent in how they treat them and when on the Internet barely half of the users use a websocket-enabled browser.&lt;/p&gt;
&lt;h2 id="building-a-real-time-risk-analysis-system-in-java-by-alexandre-navarro-alex_j_navarro-and-benoit-lacelle-benoit_lacelle"&gt;Building a real time risk analysis system in Java by Alexandre Navarro (@alex_j_navarro) and Benoît Lacelle (@benoit_lacelle)&lt;a class="headerlink" href="#building-a-real-time-risk-analysis-system-in-java-by-alexandre-navarro-alex_j_navarro-and-benoit-lacelle-benoit_lacelle" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Docker conference room was full 10 minutes before the conference started. I've been to the university on the subject so no regret. Kick-ass conference seems to be the same I have seen online.
So I went to this conference out of lot of curiosity and to get me out of my comfort zone.&lt;/p&gt;
&lt;p&gt;At the beginning, I was very much uncomfortable with the subject because the conference looked a lot like a commercial show for about a closed source product.&lt;/p&gt;
&lt;p&gt;But after a while, the speech went deeper into the many challenges of computing indicators from real time multi-dimensional data updating at a very high frequency.&lt;/p&gt;
&lt;p&gt;I must say that it was a good opportunity to learn about the scale of some existing solutions in the banking world
(Apparently, a 80Gb heap JVM is considered a small JVM at la Société Générale...), but I didn't learn much for my day-to-day work.&lt;/p&gt;
&lt;h2 id="bitcoin-et-monnaies-cryptographiques-by-gregory-paul-paulgreg"&gt;Bitcoin et monnaies cryptographiques by Gregory Paul (@paulgreg)&lt;a class="headerlink" href="#bitcoin-et-monnaies-cryptographiques-by-gregory-paul-paulgreg" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This conference is the one I will certainly remember as the one from which I learned the most and as the most complete on its subject.&lt;/p&gt;
&lt;p&gt;Gregory's conference was well organised and covered every aspect I could have had a question about on the subject of bitcoins.&lt;/p&gt;
&lt;p&gt;It covered the cryptographic principles behind the money, how transactions work and how they are secured, history of bitcoin, how to get mine and what it costs today,
the other crypto moneys and why they were created, the current eco system around bitcoin, how the money could be destroyed, etc...&lt;/p&gt;</content><category term="articles"></category><category term="Devoxx"></category><category term="Java8"></category><category term="Gradle"></category><category term="Cassandra"></category><category term="WebSocket"></category><category term="Bitcoin"></category></entry><entry><title>Devoxx France 2014, first day feedback</title><link href="https://www.javatronic.fr/posts/2014/04/17/devoxx-france-2014-first-day-feedback/" rel="alternate"></link><published>2014-04-17T00:00:00+02:00</published><updated>2014-04-17T00:00:00+02:00</updated><author><name>Sébastien Lesaint</name></author><id>tag:www.javatronic.fr,2014-04-17:/posts/2014/04/17/devoxx-france-2014-first-day-feedback/</id><summary type="html">&lt;p&gt;On Wednesday 16 of April, I went to the first day of Devoxx France 2014 in Paris. This university day was indeed crowded and choosing between session
was tough.&lt;/p&gt;
&lt;h2 id="hands-on-lab-docker-by-julien-vey-et-pierre-padrixe"&gt;Hands-on-lab: Docker by Julien Vey et Pierre Padrixe&lt;a class="headerlink" href="#hands-on-lab-docker-by-julien-vey-et-pierre-padrixe" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nice session. True hands-on session with a nice tutorial progressively diving into Docker …&lt;/p&gt;</summary><content type="html">&lt;p&gt;On Wednesday 16 of April, I went to the first day of Devoxx France 2014 in Paris. This university day was indeed crowded and choosing between session
was tough.&lt;/p&gt;
&lt;h2 id="hands-on-lab-docker-by-julien-vey-et-pierre-padrixe"&gt;Hands-on-lab: Docker by Julien Vey et Pierre Padrixe&lt;a class="headerlink" href="#hands-on-lab-docker-by-julien-vey-et-pierre-padrixe" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nice session. True hands-on session with a nice tutorial progressively diving into Docker towards a real world use case : a Docker container with a Git
repository which will trigger a build on a Docker container containing a Jenkins server via a git-hook.&lt;/p&gt;
&lt;p&gt;I don't think many attendees went to the end of the tutorial, especially those like me who had never worked with docker before, but the whole tutorial
is on &lt;a href="git@github.com:julienvey/docker-hands-on.git"&gt;Github&lt;/a&gt; with the target solution and can be finished later.&lt;/p&gt;
&lt;p&gt;Thanks the Julien Vey for their support. Good thinking setting up a VM to share on USB key during the session to get everyone started quickly.&lt;/p&gt;
&lt;h2 id="university-java-8-streams-collector-by-jose-paumard-josepaumard"&gt;University: Java 8, Streams &amp;amp; Collector by José Paumard (@JosePaumard)&lt;a class="headerlink" href="#university-java-8-streams-collector-by-jose-paumard-josepaumard" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;José's university was very well prepared and very interesting, going nicely and progressively into the new feature of Java8, featured with detailed
and intuitive explanations and illustrated by funny and far from pointless practical exercises with live coding on stage.&lt;/p&gt;
&lt;p&gt;The presentation will obviously on Parleys but José (and Remy Forax) were kind enough to answer several questions off-stage that I will report here.&lt;/p&gt;
&lt;h3 id="streams-can-not-be-reused"&gt;Streams can not be reused&lt;a class="headerlink" href="#streams-can-not-be-reused" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;José quickly said something about &lt;code&gt;Stream&lt;/code&gt; not being reusable during a live coding session.&lt;/p&gt;
&lt;p&gt;Coming from the world of Guava where &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt; can be stored in variable and reused, this statement felt very surprising to me.&lt;/p&gt;
&lt;p&gt;But indeed, Remy Forax pointed out that Streams implementation is very different from the Iterables, notably because they are implemented at the
JVM level and are capable of optimisations (among which parallelism and use of lambda) much more powerful than Guava has ever been capable of.
The way they are implemented just isn't compatible with reuse. More specifically, when a stream has been consumed, any attempt to reuse it will
throw an &lt;code&gt;IllegalStateException&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="replacing-the-collectentrysetstream"&gt;replacing the Collect([...]).entrySet().stream()&lt;a class="headerlink" href="#replacing-the-collectentrysetstream" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="question-1"&gt;Question 1&lt;a class="headerlink" href="#question-1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dans le cas d'une source de donnée par nature séqentielle est-il possible de collecte (ie. aggréger des données) sans rompre le stream ?
Si cette une source de donnée de taille indéfini et potentiellement très importante, cela évite de créer une Map en mémoire inutilement.&lt;/p&gt;
&lt;h4 id="question-1a"&gt;Question 1.a&lt;a class="headerlink" href="#question-1a" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Un stream sur un fichier est-il bien séquentielle ? dans tous les cas ? Un accès parallèle à plusieurs partie d'un même fichier,
si on ne s'intéresse pas à l'ordre des données peut être une grosse optimisation.&lt;/p&gt;
&lt;h2 id="tools-in-action-redis-une-base-not-only-nosql-by-nicolas-martignole-nmartignole"&gt;Tools in Action: Redis, une base Not Only NOSQL by Nicolas Martignole (@nmartignole)&lt;a class="headerlink" href="#tools-in-action-redis-une-base-not-only-nosql-by-nicolas-martignole-nmartignole" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nicolas did an excellent work at describing and pointing out the strong advantages and the simplicity of Redis.&lt;/p&gt;
&lt;p&gt;Illustrated by several use cases, the main of which was the own Devoxx CFP's website, this presentation gave me a pretty good idea of how to
use Redis and I really bought the easy of access and performance awareness of the product&lt;/p&gt;
&lt;p&gt;I will definitely try it.&lt;/p&gt;
&lt;h2 id="tools-in-action-jboss-forge-in-action-by-antonio-goncalvez"&gt;Tools in Action: JBoss Forge in Action by Antonio Goncalvez&lt;a class="headerlink" href="#tools-in-action-jboss-forge-in-action-by-antonio-goncalvez" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My overall feeling about this presentation was that it was a little messy. Antonio had several technical problems.&lt;/p&gt;
&lt;p&gt;Still, it was successful at giving a good idea of what JBoss Forge is (and isn't) and a high ground idea of how it is architectured.&lt;/p&gt;
&lt;h2 id="tools-in-action-bluetooth-low-energy-by-romain-menetrier-romemore"&gt;Tools in Action: Bluetooth Low Energy by Romain Menetrier (@romemore)&lt;a class="headerlink" href="#tools-in-action-bluetooth-low-energy-by-romain-menetrier-romemore" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I went to this session out of curiosity.
I don't intend to work on bluetooth any time soon but I expected this session to give me an idea of what bluetooth is nowadays and how it can be
implemented.&lt;/p&gt;
&lt;p&gt;And I was satisfied on those points with the presentation of Romain Menetrier. It was worth the time.&lt;/p&gt;</content><category term="articles"></category><category term="Devoxx"></category><category term="Java8"></category><category term="Docker"></category><category term="Redis"></category><category term="JBoss Forge"></category><category term="BlueTooth"></category></entry><entry><title>Implementing method-level security with Spring Security and Spring MVC</title><link href="https://www.javatronic.fr/posts/2014/03/15/implementing-method-level-security-with-spring-security-and-spring-mvc/" rel="alternate"></link><published>2014-03-15T00:00:00+01:00</published><updated>2014-03-15T00:00:00+01:00</updated><author><name>Sébastien Lesaint</name></author><id>tag:www.javatronic.fr,2014-03-15:/posts/2014/03/15/implementing-method-level-security-with-spring-security-and-spring-mvc/</id><summary type="html">&lt;p&gt;Using Spring Security with Spring MVC to provide method level security on Controller classes can be trooblesome : using CGLIB-based proxies might be mandatory and you might need to tweak your code to fit Spring.&lt;/p&gt;
&lt;p&gt;When setting up exactly just that on a project, I ran into a series of problem …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Using Spring Security with Spring MVC to provide method level security on Controller classes can be trooblesome : using CGLIB-based proxies might be mandatory and you might need to tweak your code to fit Spring.&lt;/p&gt;
&lt;p&gt;When setting up exactly just that on a project, I ran into a series of problem and got a finer understanding on how Spring Security implements Method Security.&lt;/p&gt;

&lt;h1 id="how-to-enable-method-security"&gt;How to enable Method Security&lt;a class="headerlink" href="#how-to-enable-method-security" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;As stated by the &lt;a href="http://docs.spring.io/spring-security/site/docs/3.1.x/reference/el-access.html#d0e5600"&gt;documentation&lt;/a&gt;, enabling Method level security with Spring Security is as simple as added a &lt;code&gt;global-method-security&lt;/code&gt; tag in your configuration.&lt;/p&gt;
&lt;p&gt;It's super easy and it works. You can even choose which annotation set you want to use with the appropriate attributes: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;secured-annotations="enabled"&lt;/code&gt; for &lt;code&gt;@Secured&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jsr250-annotations="enabled"&lt;/code&gt; for &lt;code&gt;@RolesAllowed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre-post-annotations="enabled"&lt;/code&gt; for &lt;code&gt;@PreAuthorize&lt;/code&gt;, &lt;code&gt;@PostAuthorize&lt;/code&gt;, ...&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metadata-source-ref="extraMethodSecurityMetadataSource"&lt;/code&gt; to use your own annotations&lt;ul&gt;
&lt;li&gt;more on that in another article&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="pitfalls-when-using-method-security-on-spring-mvc-controllers"&gt;Pitfalls when using Method Security on Spring MVC controllers&lt;a class="headerlink" href="#pitfalls-when-using-method-security-on-spring-mvc-controllers" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;But in fact, it's not that easy, especially with Spring MVC controllers.&lt;/p&gt;
&lt;h2 id="the-position-of-global-method-security-matters"&gt;The position of &lt;code&gt;global-method-security&lt;/code&gt; matters&lt;a class="headerlink" href="#the-position-of-global-method-security-matters" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first problem I encountered when adding &lt;code&gt;@Secured&lt;/code&gt; annotations on my Controller classes was that it simply didn't work. Spring would not enforce the required role(s), not even applying any control. My Controller classes didn't seem to be secured at all.&lt;/p&gt;
&lt;p&gt;In fact, they weren't.&lt;/p&gt;
&lt;p&gt;After some googling, I found out that the position of the &lt;code&gt;global-method-security&lt;/code&gt; tag in the configuration files is &lt;strong&gt;very&lt;/strong&gt; important. Only the beans in the current context seems to be "secured" (in fact proxied, more on that below).&lt;/p&gt;
&lt;p&gt;As most people using Spring MVC, I had two Spring Application Contexts (AP) : one for the application and one for the DispatchServlet which inherits from the application context.&lt;/p&gt;
&lt;p&gt;In this conditions, having the &lt;code&gt;global-method-security&lt;/code&gt; tag in the application AP would ignore the Controller class declared/scanned in the DispatchServlet AP.&lt;/p&gt;
&lt;p&gt;The solution is as simple as it seems : put the &lt;code&gt;global-method-security&lt;/code&gt; tag in the DispatchServlet AP.&lt;/p&gt;
&lt;p&gt;But if like me you have a Spring AP config file dedicated to Spring Security configuration, it will be part of the application's AP. And you will be sad to have to put just that one tag in another config file.&lt;/p&gt;
&lt;p&gt;I found out I couldn't make the Spring Security config part of the DispatchServlet's AP.
The DispatchServlet AP's would fail to start because no FilterChain bean existed when instanciating the &lt;code&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/code&gt; declared in the web.xml.&lt;/p&gt;
&lt;p&gt;So I put the &lt;code&gt;global-method-security&lt;/code&gt; tag in the DispatcherServlet AP and was off to meet to the next problems :)&lt;/p&gt;
&lt;h2 id="having-classes-annoted-with-controller"&gt;Having classes annoted with @Controller&lt;a class="headerlink" href="#having-classes-annoted-with-controller" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To implement Method Security, Spring Security uses Spring AOP to create proxies of the annoted controllers. Proxies implements the security checks and it they are ok, call the user's class.
By default, Spring will use JDK dynamic proxies to create a proxy object with the same methods as your class but which will not be an instance of your class.&lt;/p&gt;
&lt;p&gt;This will more often that not cause errors at some point. The one I encountered is the following one where Spring MVC can not invoke the handler method :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;java.lang.IllegalArgumentException:&lt;span class="w"&gt; &lt;/span&gt;object&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;instance&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;declaring&lt;span class="w"&gt; &lt;/span&gt;class
sun.reflect.NativeMethodAccessorImpl.invoke0&lt;span class="o"&gt;(&lt;/span&gt;Native&lt;span class="w"&gt; &lt;/span&gt;Method&lt;span class="o"&gt;)&lt;/span&gt;
sun.reflect.NativeMethodAccessorImpl.invoke&lt;span class="o"&gt;(&lt;/span&gt;NativeMethodAccessorImpl.java:57&lt;span class="o"&gt;)&lt;/span&gt;
sun.reflect.DelegatingMethodAccessorImpl.invoke&lt;span class="o"&gt;(&lt;/span&gt;DelegatingMethodAccessorImpl.java:43&lt;span class="o"&gt;)&lt;/span&gt;
java.lang.reflect.Method.invoke&lt;span class="o"&gt;(&lt;/span&gt;Method.java:606&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.web.method.support.InvocableHandlerMethod.invoke&lt;span class="o"&gt;(&lt;/span&gt;InvocableHandlerMethod.java:219&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest&lt;span class="o"&gt;(&lt;/span&gt;InvocableHandlerMethod.java:132&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle&lt;span class="o"&gt;(&lt;/span&gt;ServletInvocableHandlerMethod.java:104&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod&lt;span class="o"&gt;(&lt;/span&gt;RequestMappingHandlerAdapter.java:745&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal&lt;span class="o"&gt;(&lt;/span&gt;RequestMappingHandlerAdapter.java:686&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle&lt;span class="o"&gt;(&lt;/span&gt;AbstractHandlerMethodAdapter.java:80&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.web.servlet.DispatcherServlet.doDispatch&lt;span class="o"&gt;(&lt;/span&gt;DispatcherServlet.java:925&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.web.servlet.DispatcherServlet.doService&lt;span class="o"&gt;(&lt;/span&gt;DispatcherServlet.java:856&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.web.servlet.FrameworkServlet.processRequest&lt;span class="o"&gt;(&lt;/span&gt;FrameworkServlet.java:936&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.web.servlet.FrameworkServlet.doGet&lt;span class="o"&gt;(&lt;/span&gt;FrameworkServlet.java:827&lt;span class="o"&gt;)&lt;/span&gt;
javax.servlet.http.HttpServlet.service&lt;span class="o"&gt;(&lt;/span&gt;HttpServlet.java:621&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.web.servlet.FrameworkServlet.service&lt;span class="o"&gt;(&lt;/span&gt;FrameworkServlet.java:812&lt;span class="o"&gt;)&lt;/span&gt;
javax.servlet.http.HttpServlet.service&lt;span class="o"&gt;(&lt;/span&gt;HttpServlet.java:728&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal&lt;span class="o"&gt;(&lt;/span&gt;CharacterEncodingFilter.java:88&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.web.filter.OncePerRequestFilter.doFilter&lt;span class="o"&gt;(&lt;/span&gt;OncePerRequestFilter.java:107&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.security.web.FilterChainProxy&lt;span class="nv"&gt;$VirtualFilterChain&lt;/span&gt;.doFilter&lt;span class="o"&gt;(&lt;/span&gt;FilterChainProxy.java:330&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke&lt;span class="o"&gt;(&lt;/span&gt;FilterSecurityInterceptor.java:118&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter&lt;span class="o"&gt;(&lt;/span&gt;FilterSecurityInterceptor.java:84&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.security.web.FilterChainProxy&lt;span class="nv"&gt;$VirtualFilterChain&lt;/span&gt;.doFilter&lt;span class="o"&gt;(&lt;/span&gt;FilterChainProxy.java:342&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.security.web.access.ExceptionTranslationFilter.doFilter&lt;span class="o"&gt;(&lt;/span&gt;ExceptionTranslationFilter.java:113&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.security.web.FilterChainProxy&lt;span class="nv"&gt;$VirtualFilterChain&lt;/span&gt;.doFilter&lt;span class="o"&gt;(&lt;/span&gt;FilterChainProxy.java:342&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter&lt;span class="o"&gt;(&lt;/span&gt;SecurityContextHolderAwareRequestFilter.java:54&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.security.web.FilterChainProxy&lt;span class="nv"&gt;$VirtualFilterChain&lt;/span&gt;.doFilter&lt;span class="o"&gt;(&lt;/span&gt;FilterChainProxy.java:342&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter&lt;span class="o"&gt;(&lt;/span&gt;AbstractAuthenticationProcessingFilter.java:183&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.security.web.FilterChainProxy&lt;span class="nv"&gt;$VirtualFilterChain&lt;/span&gt;.doFilter&lt;span class="o"&gt;(&lt;/span&gt;FilterChainProxy.java:342&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.security.web.authentication.logout.LogoutFilter.doFilter&lt;span class="o"&gt;(&lt;/span&gt;LogoutFilter.java:105&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.security.web.FilterChainProxy&lt;span class="nv"&gt;$VirtualFilterChain&lt;/span&gt;.doFilter&lt;span class="o"&gt;(&lt;/span&gt;FilterChainProxy.java:342&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter&lt;span class="o"&gt;(&lt;/span&gt;SecurityContextPersistenceFilter.java:87&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.security.web.FilterChainProxy&lt;span class="nv"&gt;$VirtualFilterChain&lt;/span&gt;.doFilter&lt;span class="o"&gt;(&lt;/span&gt;FilterChainProxy.java:342&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.security.web.FilterChainProxy.doFilterInternal&lt;span class="o"&gt;(&lt;/span&gt;FilterChainProxy.java:192&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.security.web.FilterChainProxy.doFilter&lt;span class="o"&gt;(&lt;/span&gt;FilterChainProxy.java:160&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate&lt;span class="o"&gt;(&lt;/span&gt;DelegatingFilterProxy.java:343&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.web.filter.DelegatingFilterProxy.doFilter&lt;span class="o"&gt;(&lt;/span&gt;DelegatingFilterProxy.java:260&lt;span class="o"&gt;)&lt;/span&gt;
org.springframework.web.filter.OncePerRequestFilter.doFilter&lt;span class="o"&gt;(&lt;/span&gt;OncePerRequestFilter.java:107&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What happens under the hood it that Spring MVC tries and fails to invoke the method annoted with &lt;code&gt;@RequestMapping&lt;/code&gt; via refection. The &lt;code&gt;Method&lt;/code&gt; instance it created when parsing controllers is based on the type of the concrete class of our controller.
As the JDK proxy object is &lt;strong&gt;not&lt;/strong&gt; an instance of the Controller class, we get a &lt;code&gt;IllegalArgumentException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A fast and efficient workaround this is to make Spring AOP create another type of proxy by adding &lt;code&gt;proxy-target-class="true"&lt;/code&gt; to the &lt;code&gt;global-method-security&lt;/code&gt; tag.
This will tell Spring to use CGLIB-based subclass proxies instead of JDK dynamic proxies. Such proxies are actual instances of the proxied classes. That fixes our problem.&lt;/p&gt;
&lt;h2 id="having-controller-classes-without-default-constructor"&gt;Having controller classes without default constructor&lt;a class="headerlink" href="#having-controller-classes-without-default-constructor" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Happiness won't last though, if you have controllers which does not declare a default constructor. &lt;/p&gt;
&lt;p&gt;If like me you favour constructor injection over property injection then your controller classes do not define a default constructor (well, they could, but not mine).
So you're in for more trouble because CGLIB-based proxies require a default constructor to be created (see &lt;a href="http://docs.spring.io/spring/docs/3.1.x/spring-framework-reference/html/aop.html#aop-proxying"&gt;http://docs.spring.io/spring/docs/3.1.x/spring-framework-reference/html/aop.html#aop-proxying&lt;/a&gt; for details).&lt;/p&gt;
&lt;p&gt;The DispatchServlet AP fails to start with an error such as the following :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;org.springframework.beans.factory.BeanCreationException:&lt;span class="w"&gt; &lt;/span&gt;Error&lt;span class="w"&gt; &lt;/span&gt;creating&lt;span class="w"&gt; &lt;/span&gt;bean&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'managerController'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;defined&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;********************************/ManagerController.class&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;Initialization&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;bean&lt;span class="w"&gt; &lt;/span&gt;failed&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;nested&lt;span class="w"&gt; &lt;/span&gt;exception&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;org.springframework.aop.framework.AopConfigException:&lt;span class="w"&gt; &lt;/span&gt;Could&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;generate&lt;span class="w"&gt; &lt;/span&gt;CGLIB&lt;span class="w"&gt; &lt;/span&gt;subclass&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;class&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;class&lt;span class="w"&gt; &lt;/span&gt;**********************.ManagerController&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;Common&lt;span class="w"&gt; &lt;/span&gt;causes&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;problem&lt;span class="w"&gt; &lt;/span&gt;include&lt;span class="w"&gt; &lt;/span&gt;using&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;final&lt;span class="w"&gt; &lt;/span&gt;class&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;non-visible&lt;span class="w"&gt; &lt;/span&gt;class&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;nested&lt;span class="w"&gt; &lt;/span&gt;exception&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;java.lang.IllegalArgumentException:&lt;span class="w"&gt; &lt;/span&gt;Superclass&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;null&lt;span class="w"&gt; &lt;/span&gt;constructors&lt;span class="w"&gt; &lt;/span&gt;but&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;arguments&lt;span class="w"&gt; &lt;/span&gt;were&lt;span class="w"&gt; &lt;/span&gt;given
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean&lt;span class="o"&gt;(&lt;/span&gt;AbstractAutowireCapableBeanFactory.java:529&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean&lt;span class="o"&gt;(&lt;/span&gt;AbstractAutowireCapableBeanFactory.java:458&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.AbstractBeanFactory&lt;span class="nv"&gt;$1&lt;/span&gt;.getObject&lt;span class="o"&gt;(&lt;/span&gt;AbstractBeanFactory.java:295&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton&lt;span class="o"&gt;(&lt;/span&gt;DefaultSingletonBeanRegistry.java:223&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean&lt;span class="o"&gt;(&lt;/span&gt;AbstractBeanFactory.java:292&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.AbstractBeanFactory.getBean&lt;span class="o"&gt;(&lt;/span&gt;AbstractBeanFactory.java:194&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons&lt;span class="o"&gt;(&lt;/span&gt;DefaultListableBeanFactory.java:628&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization&lt;span class="o"&gt;(&lt;/span&gt;AbstractApplicationContext.java:932&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.context.support.AbstractApplicationContext.refresh&lt;span class="o"&gt;(&lt;/span&gt;AbstractApplicationContext.java:479&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext&lt;span class="o"&gt;(&lt;/span&gt;FrameworkServlet.java:651&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext&lt;span class="o"&gt;(&lt;/span&gt;FrameworkServlet.java:599&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext&lt;span class="o"&gt;(&lt;/span&gt;FrameworkServlet.java:665&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext&lt;span class="o"&gt;(&lt;/span&gt;FrameworkServlet.java:518&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;**********************.initWebApplicationContext&lt;span class="o"&gt;(&lt;/span&gt;**********:**&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.web.servlet.FrameworkServlet.initServletBean&lt;span class="o"&gt;(&lt;/span&gt;FrameworkServlet.java:459&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.web.servlet.HttpServletBean.init&lt;span class="o"&gt;(&lt;/span&gt;HttpServletBean.java:136&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;javax.servlet.GenericServlet.init&lt;span class="o"&gt;(&lt;/span&gt;GenericServlet.java:160&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.apache.catalina.core.StandardWrapper.initServlet&lt;span class="o"&gt;(&lt;/span&gt;StandardWrapper.java:1280&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.apache.catalina.core.StandardWrapper.loadServlet&lt;span class="o"&gt;(&lt;/span&gt;StandardWrapper.java:1193&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.apache.catalina.core.StandardWrapper.load&lt;span class="o"&gt;(&lt;/span&gt;StandardWrapper.java:1088&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.apache.catalina.core.StandardContext.loadOnStartup&lt;span class="o"&gt;(&lt;/span&gt;StandardContext.java:5033&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.apache.catalina.core.StandardContext.startInternal&lt;span class="o"&gt;(&lt;/span&gt;StandardContext.java:5317&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.apache.catalina.util.LifecycleBase.start&lt;span class="o"&gt;(&lt;/span&gt;LifecycleBase.java:150&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.apache.catalina.core.ContainerBase&lt;span class="nv"&gt;$StartChild&lt;/span&gt;.call&lt;span class="o"&gt;(&lt;/span&gt;ContainerBase.java:1559&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.apache.catalina.core.ContainerBase&lt;span class="nv"&gt;$StartChild&lt;/span&gt;.call&lt;span class="o"&gt;(&lt;/span&gt;ContainerBase.java:1549&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;java.util.concurrent.FutureTask.run&lt;span class="o"&gt;(&lt;/span&gt;FutureTask.java:262&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;java.util.concurrent.ThreadPoolExecutor.runWorker&lt;span class="o"&gt;(&lt;/span&gt;ThreadPoolExecutor.java:1145&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;java.util.concurrent.ThreadPoolExecutor&lt;span class="nv"&gt;$Worker&lt;/span&gt;.run&lt;span class="o"&gt;(&lt;/span&gt;ThreadPoolExecutor.java:615&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;java.lang.Thread.run&lt;span class="o"&gt;(&lt;/span&gt;Thread.java:744&lt;span class="o"&gt;)&lt;/span&gt;
Caused&lt;span class="w"&gt; &lt;/span&gt;by:&lt;span class="w"&gt; &lt;/span&gt;org.springframework.aop.framework.AopConfigException:&lt;span class="w"&gt; &lt;/span&gt;Could&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;generate&lt;span class="w"&gt; &lt;/span&gt;CGLIB&lt;span class="w"&gt; &lt;/span&gt;subclass&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;class&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;class&lt;span class="w"&gt; &lt;/span&gt;****************.ManagerController&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;Common&lt;span class="w"&gt; &lt;/span&gt;causes&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;problem&lt;span class="w"&gt; &lt;/span&gt;include&lt;span class="w"&gt; &lt;/span&gt;using&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;final&lt;span class="w"&gt; &lt;/span&gt;class&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;non-visible&lt;span class="w"&gt; &lt;/span&gt;class&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;nested&lt;span class="w"&gt; &lt;/span&gt;exception&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;java.lang.IllegalArgumentException:&lt;span class="w"&gt; &lt;/span&gt;Superclass&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;null&lt;span class="w"&gt; &lt;/span&gt;constructors&lt;span class="w"&gt; &lt;/span&gt;but&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;arguments&lt;span class="w"&gt; &lt;/span&gt;were&lt;span class="w"&gt; &lt;/span&gt;given
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.aop.framework.CglibAopProxy.getProxy&lt;span class="o"&gt;(&lt;/span&gt;CglibAopProxy.java:217&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.aop.framework.ProxyFactory.getProxy&lt;span class="o"&gt;(&lt;/span&gt;ProxyFactory.java:111&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.createProxy&lt;span class="o"&gt;(&lt;/span&gt;AbstractAutoProxyCreator.java:477&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary&lt;span class="o"&gt;(&lt;/span&gt;AbstractAutoProxyCreator.java:362&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization&lt;span class="o"&gt;(&lt;/span&gt;AbstractAutoProxyCreator.java:322&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization&lt;span class="o"&gt;(&lt;/span&gt;AbstractAutowireCapableBeanFactory.java:409&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean&lt;span class="o"&gt;(&lt;/span&gt;AbstractAutowireCapableBeanFactory.java:1488&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean&lt;span class="o"&gt;(&lt;/span&gt;AbstractAutowireCapableBeanFactory.java:521&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;...&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;common&lt;span class="w"&gt; &lt;/span&gt;frames&lt;span class="w"&gt; &lt;/span&gt;omitted
Caused&lt;span class="w"&gt; &lt;/span&gt;by:&lt;span class="w"&gt; &lt;/span&gt;java.lang.IllegalArgumentException:&lt;span class="w"&gt; &lt;/span&gt;Superclass&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;null&lt;span class="w"&gt; &lt;/span&gt;constructors&lt;span class="w"&gt; &lt;/span&gt;but&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;arguments&lt;span class="w"&gt; &lt;/span&gt;were&lt;span class="w"&gt; &lt;/span&gt;given
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.cglib.proxy.Enhancer.emitConstructors&lt;span class="o"&gt;(&lt;/span&gt;Enhancer.java:721&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.cglib.proxy.Enhancer.generateClass&lt;span class="o"&gt;(&lt;/span&gt;Enhancer.java:499&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.cglib.transform.TransformingClassGenerator.generateClass&lt;span class="o"&gt;(&lt;/span&gt;TransformingClassGenerator.java:33&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.cglib.core.DefaultGeneratorStrategy.generate&lt;span class="o"&gt;(&lt;/span&gt;DefaultGeneratorStrategy.java:25&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.cglib.core.AbstractClassGenerator.create&lt;span class="o"&gt;(&lt;/span&gt;AbstractClassGenerator.java:216&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.cglib.proxy.Enhancer.createHelper&lt;span class="o"&gt;(&lt;/span&gt;Enhancer.java:377&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.cglib.proxy.Enhancer.create&lt;span class="o"&gt;(&lt;/span&gt;Enhancer.java:285&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.aop.framework.CglibAopProxy.getProxy&lt;span class="o"&gt;(&lt;/span&gt;CglibAopProxy.java:205&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;...&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;35&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;common&lt;span class="w"&gt; &lt;/span&gt;frames&lt;span class="w"&gt; &lt;/span&gt;omitted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To fix this error, just add a default constructor to your bean :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@Controller&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ManagerController&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SomeService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;someService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// default constructor for CGLIB proxying&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// default constructor is called first and then public constructor is called with autowired dependencies&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// required to use the @Secured annotation on methods of this class&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;ManagerController&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Autowired&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;ManagerController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SomeService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;someService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;someService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;someService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@RequestMapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/all"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Secured&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ROLE_VIEW_MANAGERS"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"viewname"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="using-a-private-default-constructor"&gt;Using a private default constructor&lt;a class="headerlink" href="#using-a-private-default-constructor" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With Spring 3.2.4, the default constructor used by CGLIB-based proxies does not need to be public, so we can use a private constructor. This will avoid poluting the exposed methods of your class, but it is not very elegant nor practical. 
In fact, it is very annoying to have to add private default constructor to every Controller class that will use the &lt;code&gt;@Secured&lt;/code&gt; annotation and a non-default constructor.&lt;/p&gt;
&lt;p&gt;With Spring 3.2.8, this is not possible anyway. The default constructor has to be public otherwise proxy creation fails with the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;org.springframework.beans.factory.BeanCreationException:&lt;span class="w"&gt; &lt;/span&gt;Error&lt;span class="w"&gt; &lt;/span&gt;creating&lt;span class="w"&gt; &lt;/span&gt;bean&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'managerController'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;defined&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;****************************************/ManagerController.class&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;Initialization&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;bean&lt;span class="w"&gt; &lt;/span&gt;failed&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;nested&lt;span class="w"&gt; &lt;/span&gt;exception&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;org.springframework.aop.framework.AopConfigException:&lt;span class="w"&gt; &lt;/span&gt;Could&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;generate&lt;span class="w"&gt; &lt;/span&gt;CGLIB&lt;span class="w"&gt; &lt;/span&gt;subclass&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;class&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;class&lt;span class="w"&gt; &lt;/span&gt;**********************.ManagerController&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;Common&lt;span class="w"&gt; &lt;/span&gt;causes&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;problem&lt;span class="w"&gt; &lt;/span&gt;include&lt;span class="w"&gt; &lt;/span&gt;using&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;final&lt;span class="w"&gt; &lt;/span&gt;class&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;non-visible&lt;span class="w"&gt; &lt;/span&gt;class&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;nested&lt;span class="w"&gt; &lt;/span&gt;exception&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;java.lang.IllegalArgumentException:&lt;span class="w"&gt; &lt;/span&gt;Superclass&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;null&lt;span class="w"&gt; &lt;/span&gt;constructors&lt;span class="w"&gt; &lt;/span&gt;but&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;arguments&lt;span class="w"&gt; &lt;/span&gt;were&lt;span class="w"&gt; &lt;/span&gt;given
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean&lt;span class="o"&gt;(&lt;/span&gt;AbstractAutowireCapableBeanFactory.java:529&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean&lt;span class="o"&gt;(&lt;/span&gt;AbstractAutowireCapableBeanFactory.java:458&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.AbstractBeanFactory&lt;span class="nv"&gt;$1&lt;/span&gt;.getObject&lt;span class="o"&gt;(&lt;/span&gt;AbstractBeanFactory.java:296&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton&lt;span class="o"&gt;(&lt;/span&gt;DefaultSingletonBeanRegistry.java:223&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean&lt;span class="o"&gt;(&lt;/span&gt;AbstractBeanFactory.java:293&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.AbstractBeanFactory.getBean&lt;span class="o"&gt;(&lt;/span&gt;AbstractBeanFactory.java:194&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons&lt;span class="o"&gt;(&lt;/span&gt;DefaultListableBeanFactory.java:628&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization&lt;span class="o"&gt;(&lt;/span&gt;AbstractApplicationContext.java:932&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.context.support.AbstractApplicationContext.refresh&lt;span class="o"&gt;(&lt;/span&gt;AbstractApplicationContext.java:479&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext&lt;span class="o"&gt;(&lt;/span&gt;FrameworkServlet.java:651&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext&lt;span class="o"&gt;(&lt;/span&gt;FrameworkServlet.java:602&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext&lt;span class="o"&gt;(&lt;/span&gt;FrameworkServlet.java:665&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext&lt;span class="o"&gt;(&lt;/span&gt;FrameworkServlet.java:521&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;**********************.initWebApplicationContext&lt;span class="o"&gt;(&lt;/span&gt;**************:**&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.web.servlet.FrameworkServlet.initServletBean&lt;span class="o"&gt;(&lt;/span&gt;FrameworkServlet.java:462&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.web.servlet.HttpServletBean.init&lt;span class="o"&gt;(&lt;/span&gt;HttpServletBean.java:136&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;javax.servlet.GenericServlet.init&lt;span class="o"&gt;(&lt;/span&gt;GenericServlet.java:160&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.apache.catalina.core.StandardWrapper.initServlet&lt;span class="o"&gt;(&lt;/span&gt;StandardWrapper.java:1280&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.apache.catalina.core.StandardWrapper.loadServlet&lt;span class="o"&gt;(&lt;/span&gt;StandardWrapper.java:1193&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.apache.catalina.core.StandardWrapper.load&lt;span class="o"&gt;(&lt;/span&gt;StandardWrapper.java:1088&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.apache.catalina.core.StandardContext.loadOnStartup&lt;span class="o"&gt;(&lt;/span&gt;StandardContext.java:5033&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.apache.catalina.core.StandardContext.startInternal&lt;span class="o"&gt;(&lt;/span&gt;StandardContext.java:5317&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.apache.catalina.util.LifecycleBase.start&lt;span class="o"&gt;(&lt;/span&gt;LifecycleBase.java:150&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.apache.catalina.core.ContainerBase&lt;span class="nv"&gt;$StartChild&lt;/span&gt;.call&lt;span class="o"&gt;(&lt;/span&gt;ContainerBase.java:1559&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.apache.catalina.core.ContainerBase&lt;span class="nv"&gt;$StartChild&lt;/span&gt;.call&lt;span class="o"&gt;(&lt;/span&gt;ContainerBase.java:1549&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;java.util.concurrent.FutureTask.run&lt;span class="o"&gt;(&lt;/span&gt;FutureTask.java:262&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;java.util.concurrent.ThreadPoolExecutor.runWorker&lt;span class="o"&gt;(&lt;/span&gt;ThreadPoolExecutor.java:1145&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;java.util.concurrent.ThreadPoolExecutor&lt;span class="nv"&gt;$Worker&lt;/span&gt;.run&lt;span class="o"&gt;(&lt;/span&gt;ThreadPoolExecutor.java:615&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;java.lang.Thread.run&lt;span class="o"&gt;(&lt;/span&gt;Thread.java:744&lt;span class="o"&gt;)&lt;/span&gt;
Caused&lt;span class="w"&gt; &lt;/span&gt;by:&lt;span class="w"&gt; &lt;/span&gt;org.springframework.aop.framework.AopConfigException:&lt;span class="w"&gt; &lt;/span&gt;Could&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;generate&lt;span class="w"&gt; &lt;/span&gt;CGLIB&lt;span class="w"&gt; &lt;/span&gt;subclass&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;class&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;class&lt;span class="w"&gt; &lt;/span&gt;******************.ManagerController&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;Common&lt;span class="w"&gt; &lt;/span&gt;causes&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;problem&lt;span class="w"&gt; &lt;/span&gt;include&lt;span class="w"&gt; &lt;/span&gt;using&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;final&lt;span class="w"&gt; &lt;/span&gt;class&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;non-visible&lt;span class="w"&gt; &lt;/span&gt;class&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;nested&lt;span class="w"&gt; &lt;/span&gt;exception&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;java.lang.IllegalArgumentException:&lt;span class="w"&gt; &lt;/span&gt;Superclass&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;null&lt;span class="w"&gt; &lt;/span&gt;constructors&lt;span class="w"&gt; &lt;/span&gt;but&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;arguments&lt;span class="w"&gt; &lt;/span&gt;were&lt;span class="w"&gt; &lt;/span&gt;given
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.aop.framework.CglibAopProxy.getProxy&lt;span class="o"&gt;(&lt;/span&gt;CglibAopProxy.java:218&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.aop.framework.ProxyFactory.getProxy&lt;span class="o"&gt;(&lt;/span&gt;ProxyFactory.java:111&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.createProxy&lt;span class="o"&gt;(&lt;/span&gt;AbstractAutoProxyCreator.java:477&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary&lt;span class="o"&gt;(&lt;/span&gt;AbstractAutoProxyCreator.java:362&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization&lt;span class="o"&gt;(&lt;/span&gt;AbstractAutoProxyCreator.java:322&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization&lt;span class="o"&gt;(&lt;/span&gt;AbstractAutowireCapableBeanFactory.java:409&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean&lt;span class="o"&gt;(&lt;/span&gt;AbstractAutowireCapableBeanFactory.java:1518&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean&lt;span class="o"&gt;(&lt;/span&gt;AbstractAutowireCapableBeanFactory.java:521&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;...&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;common&lt;span class="w"&gt; &lt;/span&gt;frames&lt;span class="w"&gt; &lt;/span&gt;omitted
Caused&lt;span class="w"&gt; &lt;/span&gt;by:&lt;span class="w"&gt; &lt;/span&gt;java.lang.IllegalArgumentException:&lt;span class="w"&gt; &lt;/span&gt;Superclass&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;null&lt;span class="w"&gt; &lt;/span&gt;constructors&lt;span class="w"&gt; &lt;/span&gt;but&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;arguments&lt;span class="w"&gt; &lt;/span&gt;were&lt;span class="w"&gt; &lt;/span&gt;given
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.cglib.proxy.Enhancer.emitConstructors&lt;span class="o"&gt;(&lt;/span&gt;Enhancer.java:721&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.cglib.proxy.Enhancer.generateClass&lt;span class="o"&gt;(&lt;/span&gt;Enhancer.java:499&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.cglib.transform.TransformingClassGenerator.generateClass&lt;span class="o"&gt;(&lt;/span&gt;TransformingClassGenerator.java:33&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.cglib.core.DefaultGeneratorStrategy.generate&lt;span class="o"&gt;(&lt;/span&gt;DefaultGeneratorStrategy.java:25&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.cglib.core.AbstractClassGenerator.create&lt;span class="o"&gt;(&lt;/span&gt;AbstractClassGenerator.java:216&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.cglib.proxy.Enhancer.createHelper&lt;span class="o"&gt;(&lt;/span&gt;Enhancer.java:377&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.cglib.proxy.Enhancer.create&lt;span class="o"&gt;(&lt;/span&gt;Enhancer.java:285&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;org.springframework.aop.framework.CglibAopProxy.getProxy&lt;span class="o"&gt;(&lt;/span&gt;CglibAopProxy.java:206&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;...&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;35&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;common&lt;span class="w"&gt; &lt;/span&gt;frames&lt;span class="w"&gt; &lt;/span&gt;omitted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="using-controller-interfaces"&gt;Using Controller interfaces&lt;a class="headerlink" href="#using-controller-interfaces" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Theoretically, a way around the ugly default constructor is to add Spring MVC and Security annotations on an interface instead of a concrete class.&lt;/p&gt;
&lt;p&gt;This way, we do not need to use CGLIB-based proxies and can stick to JDK proxies.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@Controller&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ManagerController&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@RequestMapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/all"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Secured&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ROLE_VIEW_MANAGERS"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@Component&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ManagerControllerImpl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;implements&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ManagerController&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SomeService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;someService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Autowired&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;ManagerController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SomeService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;someService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;someService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;someService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"viewname"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Please note that the &lt;code&gt;@Controller&lt;/code&gt; annotation has been moved to the interface as well as &lt;code&gt;@RequestMapping&lt;/code&gt; and &lt;code&gt;@Control&lt;/code&gt; annotations.
Unfortunatly, &lt;strong&gt;this doesn't work with Spring MVC&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this case as well in the one where we started struggling with Spring-AOP in the first place, we get the &lt;code&gt;object is not an instance of declaring class&lt;/code&gt; exception from the &lt;code&gt;Having classes annoted with @Controller&lt;/code&gt; part.&lt;/p&gt;
&lt;p&gt;I'm wonder if this is a bug or at least if it could be improved...&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;For the time beeing I will stick to the CGLIB-enabled proxies with the default controller solution.&lt;/p&gt;
&lt;p&gt;But I will try and see later if AspectJ couldn't be used to weave beans at compile time and remove the use of proxy completly.&lt;/p&gt;
&lt;h1 id="some-references"&gt;Some references&lt;a class="headerlink" href="#some-references" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;While working and googling on this issue, I found this interrested comment on Stackoverflow which discusses the reasons to use Spring-AOP with controller when many ways to implements cross cutting concerns exist:
&lt;a href="http://stackoverflow.com/a/12045331"&gt;http://stackoverflow.com/a/12045331&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wrote an article on using one of theses other way in &lt;a href=""&gt;TODO article on generatic pagination solution with Spring MVC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, on the subject of comparing JDK proxies and CGLIB-based proxies, this article points that @Transaction annotation does not work with JDK proxies:
&lt;a href="http://kim.saabye-pedersen.org/2013/05/spring-annotation-on-interface-or-class.html"&gt;Spring annotation on interface or class implementing the interface??&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;References in Spring documentation &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to the Spring-AOP vs Controller in the information note &lt;code&gt;Using @RequestMapping On Interface Methods&lt;/code&gt; &lt;a href="http://docs.spring.io/spring/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;to enable Method Security &lt;a href="http://docs.spring.io/spring-security/site/docs/3.1.x/reference/el-access.html#d0e5600"&gt;http://docs.spring.io/spring-security/site/docs/3.1.x/reference/el-access.html#d0e5600&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Various articles on the use of &lt;code&gt;proxy-target-class="true"&lt;/code&gt; on the &lt;code&gt;global-method-security&lt;/code&gt; tag:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/10726478/spring-securitymvc-annotations-illegal-argument-exception"&gt;http://stackoverflow.com/questions/10726478/spring-securitymvc-annotations-illegal-argument-exception&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/18663475/spring-security-global-method-security-does-not-work"&gt;http://stackoverflow.com/questions/18663475/spring-security-global-method-security-does-not-work&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This discusses how to work around proxies completly by using AspectJ weaving at compile time&lt;/li&gt;
&lt;li&gt;This is mandatory when using controller not managed as Spring beans and could be a workaround the ugly default constructor discussed above&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Article on the importance of the position of the &lt;code&gt;global-method-security&lt;/code&gt; tag in your Spring Config :
&lt;a href="http://stackoverflow.com/questions/517527/spring-not-enforcing-method-security-annotations"&gt;http://stackoverflow.com/questions/517527/spring-not-enforcing-method-security-annotations&lt;/a&gt;&lt;/p&gt;</content><category term="articles"></category><category term="Spring MVC"></category><category term="Spring Security"></category><category term="AOP"></category></entry><entry><title>Using enum instead of String to resolve views in Spring MVC</title><link href="https://www.javatronic.fr/posts/2014/03/02/using-enum-instead-of-string-to-resolve-views-in-spring-mvc/" rel="alternate"></link><published>2014-03-02T00:00:00+01:00</published><updated>2014-03-02T00:00:00+01:00</updated><author><name>Sébastien Lesaint</name></author><id>tag:www.javatronic.fr,2014-03-02:/posts/2014/03/02/using-enum-instead-of-string-to-resolve-views-in-spring-mvc/</id><summary type="html">&lt;p&gt;The project I'm currently working on uses Spring MVC. This framework is nice, mature and efficient.&lt;/p&gt;
&lt;p&gt;But we are using &lt;code&gt;String&lt;/code&gt; as return type of our &lt;code&gt;@RequestMapping&lt;/code&gt; methods (as most people probably do) and I don't like that very much.&lt;/p&gt;
&lt;p&gt;I want to use and enum instead. I want &lt;code&gt;@RequestMapping …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;The project I'm currently working on uses Spring MVC. This framework is nice, mature and efficient.&lt;/p&gt;
&lt;p&gt;But we are using &lt;code&gt;String&lt;/code&gt; as return type of our &lt;code&gt;@RequestMapping&lt;/code&gt; methods (as most people probably do) and I don't like that very much.&lt;/p&gt;
&lt;p&gt;I want to use and enum instead. I want &lt;code&gt;@RequestMapping&lt;/code&gt; methods to return a enum constant which will be automatically resolved to a view the same way a &lt;code&gt;String&lt;/code&gt; is resolved to a view.&lt;/p&gt;

&lt;h1 id="using-an-enum-is-good"&gt;Using an enum is good&lt;a class="headerlink" href="#using-an-enum-is-good" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Using &lt;code&gt;String&lt;/code&gt; as return value of controller methods to represent view name is bad:
* bad for maintenance
* bad for refactoring
* obviously not type-safe
* adds magic numbers to your code&lt;/p&gt;
&lt;p&gt;Using an enum has many positive side effects :
* view names are all in the same place
* if it easy to tell which view is used or not with any IDE
* refactoring is much easier &lt;/p&gt;
&lt;h1 id="how-to-add-support-for-an-enum-return-type-in-spring-mvc"&gt;How to add support for an enum return type in Spring MVC&lt;a class="headerlink" href="#how-to-add-support-for-an-enum-return-type-in-spring-mvc" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="create-a-enum-with-a-string-property"&gt;create a enum with a String property&lt;a class="headerlink" href="#create-a-enum-with-a-string-property" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The string property will hold the String value &lt;code&gt;@RequestMapping&lt;/code&gt; methods used to return.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyView&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"home"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;LOGIN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"login"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;CUSTOMER_LIST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"customer/list"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Nonnull&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;logicalViewName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;ExtranetView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Nonnull&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;logicalViewName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;logicalViewName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Preconditions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;checkNotNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logicalViewName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Nonnull&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getLogicalViewName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;logicalViewName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="create-a-handlermethodreturnvaluehandler"&gt;create a &lt;code&gt;HandlerMethodReturnValueHandler&lt;/code&gt;&lt;a class="headerlink" href="#create-a-handlermethodreturnvaluehandler" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If we make our &lt;code&gt;@RequestMapping&lt;/code&gt; methods return a value of &lt;code&gt;MyView&lt;/code&gt; and run our website, Spring will simply add the value to the model and won't resolve a view and fail.&lt;/p&gt;
&lt;p&gt;To fix, that, we need to provide with an extra &lt;code&gt;HandlerMethodReturnValueHandler&lt;/code&gt; which will "convert" our enum to its String property.
To be more accurate, we need to set the &lt;code&gt;viewName&lt;/code&gt; in the &lt;code&gt;ModelAndViewContainer&lt;/code&gt; of the current request.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyViewEnumModelAndViewResolver&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;implements&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HandlerMethodReturnValueHandler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;supportsReturnType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MethodParameter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isAssignableFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getParameterType&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;handleReturnValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;returnValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MethodParameter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ModelAndViewContainer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mavContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NativeWebRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;webRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;returnValue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;returnValue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;instanceof&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;viewName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;MyView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;returnValue&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getLogicalViewName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;mavContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setViewName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// should not happen&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unexpected return type: "&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getParameterType&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;" in method: "&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMethod&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(inspiration: Spring's &lt;code&gt;org.springframework.web.servlet.mvc.method.annotation.ViewNameMethodReturnValueHandler&lt;/code&gt; class)&lt;/p&gt;
&lt;h2 id="add-our-handlermethodreturnvaluehandler-to-the-spring-mvcs-servlet-context"&gt;add our &lt;code&gt;HandlerMethodReturnValueHandler&lt;/code&gt; to the Spring MVC's servlet context&lt;a class="headerlink" href="#add-our-handlermethodreturnvaluehandler-to-the-spring-mvcs-servlet-context" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After some investigation on the web, I found that the easiest way of adding an extra &lt;code&gt;HandlerMethodReturnValueHandler&lt;/code&gt; to the Spring MVC servlet context is to use programmatic configuration.&lt;/p&gt;
&lt;p&gt;I found a like to this bug report &lt;a href="https://jira.springsource.org/browse/SPR-8648"&gt;https://jira.springsource.org/browse/SPR-8648&lt;/a&gt; which has a useful comment pointing to the source code of Spring's Greenhouse Reference Application.&lt;/p&gt;
&lt;p&gt;Since I already had some XML-based configuration in place, I created a Configuration class which referes to my XML config and therefor is pretty simple :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;
&lt;span class="nd"&gt;@EnableWebMvc&lt;/span&gt;
&lt;span class="nd"&gt;@ImportResource&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"classpath:/META-INF/spring/my-dispatcher-servlet.xml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyMvcConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WebMvcConfigurerAdapter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;addReturnValueHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HandlerMethodReturnValueHandler&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;returnValueHandlers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;returnValueHandlers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyViewEnumModelAndViewResolver&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What's important here :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Configuration&lt;/code&gt; annotation is obviously mandatory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@EnableWebMVC&lt;/code&gt; annotation is also required so that the &lt;code&gt;WebMvcConfigurerAdapter&lt;/code&gt; interface we extends is taken into account&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;WebMvcConfigurerAdapter&lt;/code&gt; provides empty implementations of the &lt;code&gt;WebMvcConfigurer&lt;/code&gt; interface methods&lt;/li&gt;
&lt;li&gt;we can then override only those we need, in our case : &lt;code&gt;addReturnValueHandlers&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;the &lt;code&gt;@ImportResource&lt;/code&gt; is here to load our legacy XML configuration&lt;/li&gt;
&lt;li&gt;existing XML configuration should be usable as is with one very important retriction :&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;&amp;lt;annotation-driven/&amp;gt;&lt;/code&gt; tag of the MVC XML namespace should be remove as the &lt;code&gt;@EnableWebMVC&lt;/code&gt; annotation is its exact programmatic equivalent.
  Not doing so will most likely make Spring fail to load your context, but the error you would get will moke likely not obviously point to the &lt;code&gt;&amp;lt;annotation-driven/&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This solution is working like a charm and I like it very much. Spring easy extensibility was a real pleasure to discover.&lt;/p&gt;
&lt;p&gt;I wonder if this solution could be made generic and bundle into Spring MVC...&lt;/p&gt;</content><category term="articles"></category><category term="Spring MVC"></category></entry><entry><title>A SMTP server in Java for unit test</title><link href="https://www.javatronic.fr/posts/2014/02/15/a-smtp-server-in-java-for-unit-test/" rel="alternate"></link><published>2014-02-15T00:00:00+01:00</published><updated>2014-02-15T00:00:00+01:00</updated><author><name>Sébastien Lesaint</name></author><id>tag:www.javatronic.fr,2014-02-15:/posts/2014/02/15/a-smtp-server-in-java-for-unit-test/</id><summary type="html">&lt;p&gt;If you ever had to write code that uses JavaMail to send emails, then you necessarily looked for a way of testing that code at some point.
If you didn't, its bad. Otherwise, you have been looking for a pure-Java implementation of a SMTP server.&lt;/p&gt;
&lt;p&gt;I did and ended using …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you ever had to write code that uses JavaMail to send emails, then you necessarily looked for a way of testing that code at some point.
If you didn't, its bad. Otherwise, you have been looking for a pure-Java implementation of a SMTP server.&lt;/p&gt;
&lt;p&gt;I did and ended using &lt;code&gt;Wiser&lt;/code&gt; and integrate it with &lt;code&gt;JUnit&lt;/code&gt; by creating a custome &lt;code&gt;Rule&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The subject is old and googling will return several framework names accross multiple blog posts, forum questions, ... I recently add to do that research and here are my conclusions.&lt;/p&gt;
&lt;h1 id="several-products-available"&gt;Several products available&lt;a class="headerlink" href="#several-products-available" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A little research on the web and you find name such as &lt;a href="http://quintanasoft.com/dumbster/"&gt;dumbster&lt;/a&gt;, &lt;a href="http://www.icegreen.com/greenmail/"&gt;GreenMail&lt;/a&gt; or &lt;a href="http://code.google.com/p/subethasmtp/wiki/Wiser"&gt;wiser&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Comparing the frameworks has already been done, so I will just link to this &lt;a href="http://eokyere.blogspot.fr/2006/10/get-wiser-with-subethasmtp.html"&gt;article&lt;/a&gt; and add my personnal points :
* Wiser is latest and most recently player in the area
* Wiser is meant for unit testing and is therefor fast and easy to use
* Greenmail has thread-safety issues in its 1.3 version and has a buggy way of handling senders/cc/bcc in its latest version (1.3.1b)
* Greenmail doesn't seem to be maintained since 2009
* Wiser doesn't seem to be maintained since 2012&lt;/p&gt;
&lt;h1 id="how-to-use-wiser"&gt;How to use Wiser&lt;a class="headerlink" href="#how-to-use-wiser" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Add subethasmtp maven dependency to your project :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.subethamail&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;subethasmtp&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.1.7&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To Start the Wiser SMTP Server, just create a new instance, setup port and hostname, and start it :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Wiser&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wiser&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Wiser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;wiser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setPort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;wiser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setHostname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;wiser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can then use JavaMail to send mail to the port and hostname you specified and then test received messages as follow :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wiser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessages&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;hasSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MimeMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wiser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessages&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getMimeMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSubject&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;isEqualTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Here is a sample subject !&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="integrating-wiser-with-junit"&gt;Integrating Wiser with JUnit&lt;a class="headerlink" href="#integrating-wiser-with-junit" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I found very convenient when integrating Wiser into JUnit tests to use a Rule.
And also, when writing unit test, one has to been carreful about the port then want to use. It must either be unique to the maven module (assuming tests are not run in parallel) or unique to the test.
Either way, assuming it is known to the unit test, I came up with the following implementation :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;fr.phan.test.rule&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;com.google.common.base.Preconditions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.junit.rules.ExternalResource&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.junit.rules.TestRule&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.subethamail.smtp.TooMuchDataException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.subethamail.smtp.server.SMTPServer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.subethamail.wiser.Wiser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.subethamail.wiser.WiserMessage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;javax.annotation.Nonnull&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;javax.mail.MessagingException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;java.io.InputStream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;java.io.PrintStream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;java.util.List&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * SmtpServerRule - a TestRule wrapping a Wiser instance (a SMTP server in Java) started and stoped right before and after each test.&lt;/span&gt;
&lt;span class="cm"&gt; * &amp;lt;br/&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt; * SmtpServerRule exposes the same methods as the {@link Wiser} instance by delegating the implementation to the instance. These methods, however, can not be&lt;/span&gt;
&lt;span class="cm"&gt; * used outside a JUnit statement (otherwise a {@link IllegalStateException} is raised).&lt;/span&gt;
&lt;span class="cm"&gt; * &amp;lt;br/&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt; * The {@link Wiser} instance can be directly retrieved but also only from inside a JUnit statement.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * @author Sébastien Lesaint&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SmtpServerRule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ExternalResource&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;implements&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TestRule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SmtpServerSupport&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SmtpServerSupport&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Wiser&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wiser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;SmtpServerRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Nonnull&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SmtpServerSupport&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SmtpServerSupport&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SmtpServerSupport&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Preconditions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;checkNotNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SmtpServerSupport&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;protected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;before&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Throwable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wiser&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Wiser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wiser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setPort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SmtpServerSupport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPort&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wiser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setHostname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SmtpServerSupport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getHostname&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wiser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;protected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;after&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wiser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * @return the inner {@link Wiser} instance&lt;/span&gt;
&lt;span class="cm"&gt;   * @throws IllegalStateException is method is not called from a JUnit statement&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Nonnull&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Wiser&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getWiser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;checkState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;getWiser()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wiser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * @return a {@link List} of {@link WiserMessage}&lt;/span&gt;
&lt;span class="cm"&gt;   * @throws IllegalStateException is method is not called from a JUnit statement&lt;/span&gt;
&lt;span class="cm"&gt;   * @see {@link Wiser#getMessages()}&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Nonnull&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WiserMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getMessages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;checkState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;getWiser()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wiser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessages&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * @throws IllegalStateException is method is not called from a JUnit statement&lt;/span&gt;
&lt;span class="cm"&gt;   * @see {@link Wiser#getServer()}&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Nonnull&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SMTPServer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;checkState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;getServer()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wiser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getServer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * @throws IllegalStateException is method is not called from a JUnit statement&lt;/span&gt;
&lt;span class="cm"&gt;   * @see {@link Wiser#accept(String, String)}&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recipient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;checkState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;accept(String, String)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wiser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recipient&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * @throws IllegalStateException is method is not called from a JUnit statement&lt;/span&gt;
&lt;span class="cm"&gt;   * @see {@link Wiser#deliver(String, String, java.io.InputStream)}&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;deliver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;InputStream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TooMuchDataException&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;checkState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;deliver(String, String, InputStream)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;wiser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deliver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * @throws IllegalStateException is method is not called from a JUnit statement&lt;/span&gt;
&lt;span class="cm"&gt;   * @see {@link Wiser#dumpMessages(java.io.PrintStream)}&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;dumpMessages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PrintStream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MessagingException&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;checkState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dumpMessages(PrintStream)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;wiser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dumpMessages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;checkState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Preconditions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;checkState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wiser&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s must not be called outside of a JUnit statement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the &lt;code&gt;SmtpServerSupport&lt;/code&gt; interface which will usually be implemented by the JUnit test :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;fr.phan.test.rule&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;javax.annotation.Nonnull&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * SmtpServerSupport - Interface usually implemented by the JUnit test class.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * @author Sébastien Lesaint&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;SmtpServerSupport&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * the SMTP port.&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getPort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * The hostname (for example &amp;#39;localhost&amp;#39;)&lt;/span&gt;
&lt;span class="cm"&gt;   *&lt;/span&gt;
&lt;span class="cm"&gt;   * @return a {@link String}&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Nonnull&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getHostname&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="which-port-to-use"&gt;which port to use ?&lt;a class="headerlink" href="#which-port-to-use" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h1 id="to-go-a-little-bit-further"&gt;To go a little bit further&lt;a class="headerlink" href="#to-go-a-little-bit-further" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="class-rule"&gt;class Rule&lt;a class="headerlink" href="#class-rule" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The current implementation of the Rule starts and stops the SMTP server around each test. It might be more efficient to implement a class Rule which starts/stops the server only one per class.
To do so, the only point to investigate is how to reset the status of the SMTP before each test, ie. clearing received messages. I haven't looked into that yet.&lt;/p&gt;
&lt;h2 id="random-port"&gt;random port&lt;a class="headerlink" href="#random-port" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another could feature would be to create the rule in a mode where the port would be chosen at random, the SMTP server started and if the start fails another port choosen and tried in loop for several times.
Combined with the class Rule feature, this feature would be extremely convenient to create tests which can be run in parallel inside the same maven module.
To do so, the only point to investigate is wheter &lt;code&gt;wiser.start()&lt;/code&gt; fails immediatly if the port is not available.&lt;/p&gt;</content><category term="articles"></category><category term="Java"></category><category term="JUnit"></category><category term="Smtp"></category><category term="Unit Testing"></category></entry><entry><title>Using a TestRule to initialize Mockito Mocks in a JUnit test</title><link href="https://www.javatronic.fr/posts/2014/02/13/using-a-testrule-to-initialize-mockito-mocks-in-a-junit-test/" rel="alternate"></link><published>2014-02-13T00:00:00+01:00</published><updated>2014-02-13T00:00:00+01:00</updated><author><name>Sébastien Lesaint</name></author><id>tag:www.javatronic.fr,2014-02-13:/posts/2014/02/13/using-a-testrule-to-initialize-mockito-mocks-in-a-junit-test/</id><summary type="html">&lt;p&gt;Using Mockito annotations in JUnit tests is very convenient.&lt;/p&gt;
&lt;p&gt;To make it even easier, initialisation can be made automatic by using a Runner (with annotation &lt;code&gt;@RunWith(MockitoJUnitRunner.class&lt;/code&gt;) that will call &lt;code&gt;MockitoAnnotations.initMocks(Object)&lt;/code&gt; for us.&lt;/p&gt;
&lt;p&gt;The problem is : the runner is executed after the class is initialized by constructor …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Using Mockito annotations in JUnit tests is very convenient.&lt;/p&gt;
&lt;p&gt;To make it even easier, initialisation can be made automatic by using a Runner (with annotation &lt;code&gt;@RunWith(MockitoJUnitRunner.class&lt;/code&gt;) that will call &lt;code&gt;MockitoAnnotations.initMocks(Object)&lt;/code&gt; for us.&lt;/p&gt;
&lt;p&gt;The problem is : the runner is executed after the class is initialized by constructor (obviously), making it impossible, for example, to have references to mocks or injected objects in rules.&lt;/p&gt;
&lt;h1 id="using-a-testrule-to-initialize-the-class"&gt;Using a TestRule to initialize the class&lt;a class="headerlink" href="#using-a-testrule-to-initialize-the-class" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The solution around this is pretty simple, but it is not provided by Mockito as far as I could see : use a TestRule to initialize the class instead of a Runner.&lt;/p&gt;
&lt;p&gt;Here is the code of the TestRule (very simple, indeed) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;fr.phan.testfr.phan.webapp.controller.test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.junit.rules.TestRule&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.junit.runner.Description&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.junit.runners.model.Statement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.mockito.MockitoAnnotations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MockitoAnnotationsRule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;implements&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TestRule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;MockitoAnnotationsRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MockitoAnnotations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initMocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Statement&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Statement&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This class takes the Unit test as a contructor argument and simply calls &lt;code&gt;MockitoAnnotations.initMocks()&lt;/code&gt; on it.&lt;/p&gt;
&lt;h1 id="usage"&gt;Usage&lt;a class="headerlink" href="#usage" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This TestRule is intended to be used as a public, non static property in a JUnit test, annoted with &lt;code&gt;@Rule&lt;/code&gt;.
The only constraint is that the property must be placed in the code before any other rule or object instanced during the creation of the test Object which uses a property annoted with either &lt;code&gt;@Mock&lt;/code&gt; or &lt;code&gt;@InjectMocks&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Sample usage in unit test for a Spring MVC controller :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;fr.phan.webapp.controller&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;fr.phan.webapp.controller.test.MyMockMvc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;fr.phan.webapp.controller.test.MockitoAnnotationsRule&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;fr.phan.webapp.controller.view.ExtranetView&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.junit.Rule&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.mockito.InjectMocks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.mockito.Mock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;org.springframework.test.web.servlet.result.MockMvcResultMatchers.status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyControllerTest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Mock&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PeanutService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;peanutService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@InjectMocks&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyController&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Rule&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MockitoAnnotationsRule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mockitoAnnotationsRule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MockitoAnnotationsRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Rule&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/** MyMockMvc decorates a MockMvc instance and factorizes initialization code generic to the whole webapp */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyMockMvc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mockMvc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyMockMvc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_should_return_ok&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;mockMvc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/toto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;andExpect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;isOk&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="comments"&gt;Comments&lt;a class="headerlink" href="#comments" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="comparison-of-using-a-testrule-against-using-a-runner"&gt;Comparison of using a TestRule against using a Runner :&lt;a class="headerlink" href="#comparison-of-using-a-testrule-against-using-a-runner" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pros&lt;ul&gt;
&lt;li&gt;benefits of the TestRule paradigm over the Runner paradigm&lt;ul&gt;
&lt;li&gt;one can use any number of TestRule but only one Runner in a Test&lt;/li&gt;
&lt;li&gt;one can decide to execute a Rule before another one by just ordering the properties&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;code is easily shared and one can use mock and injected objects in other TestRule or objects created during the test Object's initialisation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons&lt;ul&gt;
&lt;li&gt;quite more verbose than adding &lt;code&gt;@RunWith(MockitoJUnitRunner.class)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="is-it-really-a-testrule"&gt;Is it really a TestRule ?&lt;a class="headerlink" href="#is-it-really-a-testrule" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some might say that &lt;code&gt;MockitoAnnotationsRule&lt;/code&gt; beeing a &lt;code&gt;TestRule&lt;/code&gt; is not relevant since it provides no useful implementation for the &lt;code&gt;apply&lt;/code&gt; defined by the &lt;code&gt;TestRule&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;Very good point. I could even add that it probably adds (some minor) overhead to the statement execution since our &lt;code&gt;apply&lt;/code&gt; method is called but does nothing.&lt;/p&gt;
&lt;p&gt;But on the other hand, adding the &lt;code&gt;@Rule&lt;/code&gt; annotation on our &lt;code&gt;MockitoAnnotationsRule&lt;/code&gt; property adds a great deal of readibility and defines clearly its purpose.&lt;/p&gt;
&lt;p&gt;That's why I will stay with implementing &lt;code&gt;TestRule&lt;/code&gt;.&lt;/p&gt;</content><category term="articles"></category><category term="Java"></category><category term="JUnit"></category><category term="Mockito"></category><category term="Spring MVC"></category></entry><entry><title>Using Jekyll for GitHub pages</title><link href="https://www.javatronic.fr/posts/2014/01/15/using-jekyll-for-github-pages/" rel="alternate"></link><published>2014-01-15T00:00:00+01:00</published><updated>2014-01-15T00:00:00+01:00</updated><author><name>Sébastien Lesaint</name></author><id>tag:www.javatronic.fr,2014-01-15:/posts/2014/01/15/using-jekyll-for-github-pages/</id><summary type="html">&lt;p&gt;Personnal notes for installing and using Jekyll for GitHub pages&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here I gather notes on how I installed Jekyll for Github pages based mostly on informations from &lt;a href="https://help.github.com/articles/using-jekyll-with-pages"&gt;Github's help page&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="installing"&gt;Installing&lt;a class="headerlink" href="#installing" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="ruby-and-rubygems-as-first-prerequisite"&gt;Ruby and RubyGems as first prerequisite&lt;a class="headerlink" href="#ruby-and-rubygems-as-first-prerequisite" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ruby 1.9.3 is required (as of now)&lt;/li&gt;
&lt;li&gt;installing rubygems directly only installs Ruby 1.8.x =&amp;gt; need to install ruby manually&lt;/li&gt;
&lt;li&gt;to list installed packages via APT, you can use &lt;code&gt;sudo dpkg --get-selections&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;source &lt;a href="http://akyl.net/how-list-all-installed-packages-ubuntu-centos-and-other-linux-systems"&gt;http://akyl.net/how-list-all-installed-packages-ubuntu-centos-and-other-linux-systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ruby-dev package seems required to build gem github-pages&lt;ul&gt;
&lt;li&gt;otherwise, you might get an error :&lt;/li&gt;
&lt;li&gt;resource : &lt;a href="http://stackoverflow.com/questions/7645918/require-no-such-file-to-load-mkmf-loaderror"&gt;http://stackoverflow.com/questions/7645918/require-no-such-file-to-load-mkmf-loaderror&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;ERROR:&lt;span class="w"&gt;  &lt;/span&gt;Error&lt;span class="w"&gt; &lt;/span&gt;installing&lt;span class="w"&gt; &lt;/span&gt;github-pages:
&lt;span class="w"&gt;    &lt;/span&gt;ERROR:&lt;span class="w"&gt; &lt;/span&gt;Failed&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;gem&lt;span class="w"&gt; &lt;/span&gt;native&lt;span class="w"&gt; &lt;/span&gt;extension.

&lt;span class="w"&gt;          &lt;/span&gt;/usr/bin/ruby1.9.1&lt;span class="w"&gt; &lt;/span&gt;extconf.rb
&lt;span class="w"&gt;          &lt;/span&gt;/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;require&lt;span class="s1"&gt;&amp;#39;: cannot load such file -- mkmf (LoadError)&lt;/span&gt;
&lt;span class="s1"&gt;            from /usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;extconf.rb:1:in&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&amp;lt;main&amp;gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;installation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ruby1.9.1
sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ruby1.9.1-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Under Ubuntu 12.04 on my XPS 13, ruby 1.8 is the default alternative. To force 1.9.1 :&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;unlink&lt;span class="w"&gt; &lt;/span&gt;/etc/alternatives/ruby
sudo&lt;span class="w"&gt; &lt;/span&gt;ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;/usr/bin/ruby1.9.1&lt;span class="w"&gt; &lt;/span&gt;/etc/alternatives/ruby
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;RubyGems&lt;/li&gt;
&lt;li&gt;Under Ubuntu 12.04 on my XPS 13, there seems to be an already install rubygems 1.8.11, which was not installed via apt-get &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;rubygems
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jekyll"&gt;Jekyll&lt;a class="headerlink" href="#jekyll" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;gem&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="github-pages"&gt;GitHub Pages&lt;a class="headerlink" href="#github-pages" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Source : &lt;a href="https://help.github.com/articles/using-jekyll-with-pages#installing-jekyll"&gt;https://help.github.com/articles/using-jekyll-with-pages#installing-jekyll&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;gem&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;github-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rake"&gt;Rake&lt;a class="headerlink" href="#rake" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rake is a build tool that we can use to automate several blog editing task&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;gem&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;rake
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Rake build file is name &lt;code&gt;Rakefile&lt;/code&gt; and is written in pure Ruby&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="using-jekyll"&gt;Using Jekyll&lt;a class="headerlink" href="#using-jekyll" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Run the command below on the root of your GitHub pages clone&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;starts jekyll to diplay posts AND draft and watch for changes&lt;/li&gt;
&lt;li&gt;jekyll can then be stoped with CTRL+C&lt;/li&gt;
&lt;li&gt;by default website is visible on http://localhost:4000&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;jekyll&lt;span class="w"&gt; &lt;/span&gt;serve&lt;span class="w"&gt; &lt;/span&gt;--draft&lt;span class="w"&gt; &lt;/span&gt;--watch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="articles"></category><category term="Sublime Text"></category><category term="Github"></category><category term="Ruby"></category></entry><entry><title>Tuning Sublime for markdown editing</title><link href="https://www.javatronic.fr/posts/2014/01/10/tuning-sublime-for-markdown-editing/" rel="alternate"></link><published>2014-01-10T00:00:00+01:00</published><updated>2014-01-10T00:00:00+01:00</updated><author><name>Sébastien Lesaint</name></author><id>tag:www.javatronic.fr,2014-01-10:/posts/2014/01/10/tuning-sublime-for-markdown-editing/</id><summary type="html">&lt;p&gt;Personnal notes for tuning Sublime Text 2&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here I keep a few notes on how to configure Sublime Text 2 to edit markdow editing.&lt;/p&gt;
&lt;h1 id="markdown-editing-in-sublime-text"&gt;Markdown Editing in Sublime Text&lt;a class="headerlink" href="#markdown-editing-in-sublime-text" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Excellent resource&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.macstories.net/roundups/sublime-text-2-and-markdown-tips-tricks-and-links/"&gt;http://www.macstories.net/roundups/sublime-text-2-and-markdown-tips-tricks-and-links/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install Sublime Text&lt;/li&gt;
&lt;li&gt;see &lt;a href="https://www.javatronic.fr/posts/2014/01/08/installing-sublime-for-my-use/"&gt;Installing Sublime for my use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Extends Sublime for better editing experience (via Package Control)&lt;/li&gt;
&lt;li&gt;Add package MarkdownEditing&lt;ul&gt;
&lt;li&gt;installation&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ttscoff.github.com/MarkdownEditing/"&gt;http://ttscoff.github.com/MarkdownEditing/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CTRL+SHIFT+P &amp;gt; Install Package&lt;/li&gt;
&lt;li&gt;package name is "MarkdownEditing"&lt;/li&gt;
&lt;li&gt;configuration&lt;/li&gt;
&lt;li&gt;set "GitHub flavored Markdown" as default&lt;ul&gt;
&lt;li&gt;open a Markdown file&lt;/li&gt;
&lt;li&gt;select your flavor from the menu: View &amp;gt; Syntax &amp;gt; Open all with current extension as&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;overwrite few properties of MarkdownEditing to have black theme, not centered editing, no wrapping&lt;ul&gt;
&lt;li&gt;open user preferences Preferences &amp;gt; Package Settings &amp;gt; MarkdownEditing &amp;gt; Markdown GFM Settings - User&lt;/li&gt;
&lt;li&gt;change content with below&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;extensions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;md&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mdown&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;markdown&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;

&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;color_scheme&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Packages/MarkdownEditing/MarkdownEditor-Dark.tmTheme&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;// Layout&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;draw_centered&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;word_wrap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;wrap_width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Add Syntax highlighting sublime-markdown-extended (for reference, not used, MarkdownEditing is better)&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jonschlinkert/sublime-markdown-extended"&gt;https://github.com/jonschlinkert/sublime-markdown-extended&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CTRL+SHIFT+P &amp;gt; Install Package&lt;/li&gt;
&lt;li&gt;package name is "Markdown Extended"&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Add Color Theme Monokai Extended (not used for markdown, but good theme for other files)&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jonschlinkert/sublime-monokai-extended"&gt;https://github.com/jonschlinkert/sublime-monokai-extended&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CTRL+SHIFT+P &amp;gt; Install Package&lt;/li&gt;
&lt;li&gt;package name is "Monokai Extended"&lt;/li&gt;
&lt;li&gt;select as default color theme&lt;/li&gt;
&lt;li&gt;Preferences &amp;gt; Color sheme &amp;gt; Monokai Extended &amp;gt; Monokai Extended&lt;/li&gt;
&lt;li&gt;Bright sheme hurts my eyes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="articles"></category><category term="Sublime Text"></category></entry><entry><title>Installing Sublime for my use</title><link href="https://www.javatronic.fr/posts/2014/01/08/installing-sublime-for-my-use/" rel="alternate"></link><published>2014-01-08T00:00:00+01:00</published><updated>2014-01-08T00:00:00+01:00</updated><author><name>Sébastien Lesaint</name></author><id>tag:www.javatronic.fr,2014-01-08:/posts/2014/01/08/installing-sublime-for-my-use/</id><summary type="html">&lt;p&gt;How I installed Sublime Text 2 on Ubuntu&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article, I keep track of how I installed &lt;a href="http://www.sublimetext.com/2"&gt;Sublime Text 2&lt;/a&gt; on my computer(s) running Ubuntu, from download to adding a launcher in Unity sidebar.&lt;/p&gt;
&lt;h2 id="installing"&gt;Installing&lt;a class="headerlink" href="#installing" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Download Sublime from website&lt;ul&gt;
&lt;li&gt;download linux 64 bit version at &lt;a href="http://www.sublimetext.com/2"&gt;http://www.sublimetext.com/2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;latest version at the time of my writing is 2.0.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;save to &lt;code&gt;/opt/INSTALL_MEDIA&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;create &lt;code&gt;/opt/sublimetext&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/opt
sudo&lt;span class="w"&gt; &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;sublimetext
sudo&lt;span class="w"&gt; &lt;/span&gt;chown&lt;span class="w"&gt; &lt;/span&gt;lesaint:lesaint&lt;span class="w"&gt; &lt;/span&gt;sublimetext
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;cp tar file to &lt;code&gt;/opt/sublime&lt;/code&gt;, decompress it and create symbolic link to the current version&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cp&lt;span class="w"&gt; &lt;/span&gt;../INSTALL_MEDIA/Sublime&lt;span class="se"&gt;\ &lt;/span&gt;Text&lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.2&lt;span class="se"&gt;\ &lt;/span&gt;x64.tar.bz2&lt;span class="w"&gt; &lt;/span&gt;.
tar&lt;span class="w"&gt; &lt;/span&gt;xvfj&lt;span class="w"&gt; &lt;/span&gt;Sublime&lt;span class="se"&gt;\ &lt;/span&gt;Text&lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.2&lt;span class="se"&gt;\ &lt;/span&gt;x64.tar.bz2
mv&lt;span class="w"&gt; &lt;/span&gt;Sublime&lt;span class="se"&gt;\ &lt;/span&gt;Text&lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.2
ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.2&lt;span class="w"&gt; &lt;/span&gt;sublime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="executing"&gt;Executing&lt;a class="headerlink" href="#executing" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;add sublime to local bin directory for convenient command line use&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;/opt/sublimetext/sublime/sublime_text&lt;span class="w"&gt; &lt;/span&gt;/usr/local/bin/sublime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;create sidebar launcher in Unity&lt;ul&gt;
&lt;li&gt;create a desktop file in &lt;code&gt;~/.local/share/applications/&lt;/code&gt; called &lt;code&gt;sublimetext.desktop&lt;/code&gt; with following content&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Desktop&lt;span class="w"&gt; &lt;/span&gt;Entry&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Sublime&lt;span class="w"&gt; &lt;/span&gt;Text&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;Exec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/opt/sublimetext/sublime/sublime_text&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;%F
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;MimeType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;text/plain&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;Terminal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Application
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/sublimetext/sublime/Icon/256x256/sublime_text.png
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;Categories&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;GNOME&lt;span class="p"&gt;;&lt;/span&gt;GTK&lt;span class="p"&gt;;&lt;/span&gt;Utility&lt;span class="p"&gt;;&lt;/span&gt;TextEditor&lt;span class="p"&gt;;&lt;/span&gt;Development&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;Actions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;New&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Desktop&lt;span class="w"&gt; &lt;/span&gt;Action&lt;span class="w"&gt; &lt;/span&gt;New&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;New&lt;span class="w"&gt; &lt;/span&gt;Editor&lt;span class="w"&gt; &lt;/span&gt;Window
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;Exec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/opt/sublimetext/sublime/sublime_text&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--new-window
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;MimeType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;text/plain&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;OnlyShowIn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Unity&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;resources&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="nv"&gt;http&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;sublimetext&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;forum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;viewtopic&lt;/span&gt;.&lt;span class="nv"&gt;php&lt;/span&gt;?&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3457&lt;/span&gt;#&lt;span class="nv"&gt;p43852&lt;/span&gt;]&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;http&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;sublimetext&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;forum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;viewtopic&lt;/span&gt;.&lt;span class="nv"&gt;php&lt;/span&gt;?&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3457&lt;/span&gt;#&lt;span class="nv"&gt;p43852&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="nv"&gt;http&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;saintsjd&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;sidebar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;launcher&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;sublime&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ubuntu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;unity&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;]&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;http&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;saintsjd&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;sidebar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;launcher&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;sublime&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ubuntu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;unity&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="minimal-sublime-tuning"&gt;Minimal Sublime tuning&lt;a class="headerlink" href="#minimal-sublime-tuning" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Install Package Control extension&lt;ul&gt;
&lt;li&gt;Package Control is the most convenient way of extending Sublime Text and offers lots of resources&lt;/li&gt;
&lt;li&gt;see instructions at &lt;a href="https://sublime.wbond.net/installation"&gt;https://sublime.wbond.net/installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keyboard shortcuts&lt;ul&gt;
&lt;li&gt;make delete line shortcut actually useable&lt;ul&gt;
&lt;li&gt;default shurtcut ctrl+shift+k can not be used with a single hand&lt;/li&gt;
&lt;li&gt;open shorcut preferences : Preferences &amp;gt; Key Bindings - User&lt;/li&gt;
&lt;li&gt;add the following line (which overwrite default's ctrl+d key binding for command find_under_expand)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ctrl+d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;run_macro_file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Packages/Default/Delete Line.sublime-macro&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;User preferences&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I found several nice ideas of tuning Sublime Text there : &lt;a href="http://www.synbioz.com/blog/sublime_text"&gt;http://www.synbioz.com/blog/sublime_text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;open user preferences : Preferences &amp;gt; Settings - User&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;make sure files have trailing new line
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;ensure_newline_at_eof_on_save&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;trim_trailing_white_space_on_save&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;improve visibility of modified files tabs and hightligh line with cursor&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;highlight_line&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;highlight_modified_tabs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="articles"></category></entry></feed>